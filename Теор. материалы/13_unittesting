{"cells":[{"cell_type":"markdown","metadata":{"id":"KbPKthEXnXcJ"},"source":["# Unit-тестирование\n"]},{"cell_type":"markdown","metadata":{"id":"UhTFb6IEnXcJ"},"source":["## Простое тестирование\n","\n","`assert` - проверяет условие, если условие неверно - выдает ошибку `AssertionError`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iuuuyKkEnXcK","outputId":"e8a4c2e9-d797-4c27-cc56-4b74630c7408"},"outputs":[{"ename":"AssertionError","evalue":"Sum should be 6","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_564/1094947437.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnums\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnums\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Sum should be 6\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAssertionError\u001b[0m: Sum should be 6"]}],"source":["nums = [1, 2, 4]\n","\n","assert sum(nums) == 6, \"Sum should be 6\""]},{"cell_type":"markdown","metadata":{"id":"HUrtdQkDnXcL"},"source":["## Модуль unittest\n","\n","В Python встроен модуль **unittest**, который поддерживает автоматизацию тестов, использование общего кода для настройки и завершения тестов, объединение тестов в группы, а также позволяет отделять тесты от фреймворка для вывода информации.\n","\n","Для автоматизации тестов, unittest поддерживает некоторые важные концепции:\n","- **Испытательный стенд (test fixture)** - выполняется подготовка, необходимая для выполнения тестов и все необходимые действия для очистки после выполнения тестов. Это может включать, например, создание временных баз данных или запуск серверного процесса.\n","\n","- **Тестовый случай (test case)** - минимальный блок тестирования. Он проверяет ответы для разных наборов данных. Модуль unittest предоставляет базовый класс TestCase, который можно использовать для создания новых тестовых случаев.\n","\n","- **Набор тестов (test suite)** - несколько тестовых случаев, наборов тестов или и того и другого. Он используется для объединения тестов, которые должны быть выполнены вместе.\n","\n","- **Исполнитель тестов (test runner)** - компонент, который управляет выполнением тестов и предоставляет пользователю результат. Исполнитель может использовать графический или текстовый интерфейс или возвращать специальное значение, которое сообщает о результатах выполнения тестов.\n"]},{"cell_type":"markdown","metadata":{"id":"0H0gPFHqnXcM"},"source":["Простой пример проверки работы строковых методов:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DWOFhyZGnXcN","outputId":"af15b043-ec1f-451c-857e-4c7d97cc1223","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"error","timestamp":1710239272167,"user_tz":-180,"elapsed":13,"user":{"displayName":"Бояров Алексей","userId":"05058840961708249492"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["E\n","======================================================================\n","ERROR: /root/ (unittest.loader._FailedTest)\n","----------------------------------------------------------------------\n","AttributeError: module '__main__' has no attribute '/root/'\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.004s\n","\n","FAILED (errors=1)\n"]},{"output_type":"error","ename":"SystemExit","evalue":"True","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m True\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py:3561: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"]}],"source":["import unittest\n","\n","class TestStringMethods(unittest.TestCase):\n","    # тестовые методы должны начинаться с test\n","    def test_upper(self):\n","        self.assertEqual('foo'.upper(), 'FOO')\n","\n","    def test_isupper(self):\n","        self.assertTrue('FOO'.isupper())\n","        self.assertFalse('Foo'.isupper())\n","\n","    def test_split(self):\n","        s = 'hello world'\n","        self.assertEqual(s.split(), ['hello', 'world'])\n","        # Проверим, что s.split не работает, если разделитель - не строка\n","        with self.assertRaises(TypeError):\n","            s.split(2)\n","\n","if __name__ == '__main__':\n","\n","    unittest.main()"]},{"cell_type":"markdown","metadata":{"id":"mog3hr4KnXcN"},"source":["#### Опаньки...\n","\n","А что случилось?\n","\n",">The reason is that `unittest.main` looks at **sys.argv** and first parameter is what started IPython or Jupyter, therefore the error about kernel connection file not being a valid attribute. Passing explicit list to `unittest.main` will prevent IPython and Jupyter look at **sys.argv**. Passing **exit=False** will prevent unittest.main to shutdown the kernell process\n","\n","Сохраним имеющийся код тестирования в файл (понадобится позже):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L0_obpFHnXcN"},"outputs":[],"source":["def dump_to(path):\n","    with open(path, 'w') as f:\n","        f.write(_i)  # _i это \"последний выполненный Input\" в iPython\n","\n","dump_to('strings.py')"]},{"cell_type":"markdown","metadata":{"id":"38nal_QRnXcO"},"source":["Cкорректируем код наших тестов:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FfyoOD45nXcO","outputId":"493afec1-ffa7-44b4-c311-56bcd864479e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710239282041,"user_tz":-180,"elapsed":6,"user":{"displayName":"Бояров Алексей","userId":"05058840961708249492"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["...\n","----------------------------------------------------------------------\n","Ran 3 tests in 0.012s\n","\n","OK\n"]}],"source":["class TestStringMethods(unittest.TestCase):\n","    # тестовые методы должны начинаться с test\n","    def test_upper(self):\n","        self.assertEqual('foo'.upper(), 'FOO')\n","\n","    def test_isupper(self):\n","        self.assertTrue('FOO'.isupper())\n","        self.assertFalse('Foo'.isupper())\n","\n","    def test_split(self):\n","        s = 'hello world'\n","        self.assertEqual(s.split(), ['hello', 'world'])\n","        # Проверим, что s.split не работает, если разделитель - не строка\n","        with self.assertRaises(TypeError):\n","            s.split(2)\n","\n","if __name__ == '__main__':\n","\n","    unittest.main(argv=['first-arg-is-ignored'], exit=False)"]},{"cell_type":"markdown","metadata":{"id":"esi8LflFnXcO"},"source":["## Интерфейс командной строки\n","\n","Можем тестировать отдельный модуль, класс или метод:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8qHhMgAgnXcP","outputId":"8ce78aaf-bf84-4376-b111-c6787267d3aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["...\n","----------------------------------------------------------------------\n","Ran 3 tests in 0.000s\n","\n","OK\n","...\n","----------------------------------------------------------------------\n","Ran 3 tests in 0.000s\n","\n","OK\n",".\n","----------------------------------------------------------------------\n","Ran 1 test in 0.000s\n","\n","OK\n"]}],"source":["!python3 -m unittest strings                               # модуль\n","!python3 -m unittest strings.TestStringMethods             # класс\n","!python3 -m unittest strings.TestStringMethods.test_split  # метод"]},{"cell_type":"markdown","metadata":{"id":"oXTfF4junXcP"},"source":["С помощью флага *-v* можно получить более детальный отчёт"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xjIy2ev1nXcP","outputId":"b3624582-879f-447d-d323-af7704c90d40"},"outputs":[{"name":"stdout","output_type":"stream","text":["test_isupper (strings.TestStringMethods) ... ok\r\n","test_split (strings.TestStringMethods) ... ok\r\n","test_upper (strings.TestStringMethods) ... ok\r\n","\r\n","----------------------------------------------------------------------\r\n","Ran 3 tests in 0.000s\r\n","\r\n","OK\r\n"]}],"source":["#:\n","!python3 -m unittest -v strings"]},{"cell_type":"markdown","metadata":{"id":"L6wkUlzAnXcP"},"source":["Ещё флаги:\n","- **-b (--buffer)** - вывод программы при провале теста будет показан, а не скрыт, как обычно.\n","- **-c (--catch)** - Ctrl+C ожидает завершения текущего теста и сообщает текущие результаты, второе нажатие - обычное поведение.\n","- **-f (--failfast)** - выход после первого же неудачного теста.\n","- **--locals** (начиная с Python 3.5) - показывать локальные переменные для провалившихся тестов."]},{"cell_type":"markdown","metadata":{"id":"LhOzQGG6nXcP"},"source":["## Обнаружение тестов\n","\n","`unittest` поддерживает простое обнаружение тестов. Для совместимости с обнаружением тестов все файлы тестов должны быть модулями или пакетами, импортируемыми из директории верхнего уровня проекта ([см. подробнее о правилах наименования модулей](https://pythonworld.ru/osnovy/rabota-s-modulyami-sozdanie-podklyuchenie-instrukciyami-import-i-from.html#id3)).\n","\n","Обнаружение тестов реализовано в `TestLoader.discover()`, но может быть использовано из командной строки:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l06ACKpSnXcQ","outputId":"efb9d616-33a3-41a1-828c-417dcacf9019"},"outputs":[{"name":"stdout","output_type":"stream","text":["...\r\n","----------------------------------------------------------------------\r\n","Ran 3 tests in 0.000s\r\n","\r\n","OK\r\n"]}],"source":["!mv strings.py test_strings.py  #чтобы сработало переименуем модуль в test....py\n","!python3 -m unittest discover"]},{"cell_type":"markdown","metadata":{"id":"vMjN2AQrnXcQ"},"source":["## Организация тестового кода\n","\n","Создадим класс, который будем тестировать:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ToX14yaEnXcQ"},"outputs":[],"source":["class Widget():\n","    def __init__(self, name, x = 50, y = 50):\n","        self.name = name\n","        self.x = x\n","        self.y = y\n","\n","    def size(self):\n","        return (self.x, self.y)"]},{"cell_type":"markdown","metadata":{"id":"G6N3v4UGnXcQ"},"source":["Базовые блоки тестирования это **тестовые случаи** - простые случаи, которые должны быть проверены на корректность.\n","\n","Тестовый случай создаётся путём наследования от unittest.TestCase.\n","\n","Тестирующий код должен быть самостоятельным, то есть никак не зависеть от других тестов.\n","\n","Простейший подкласс **TestCase** может просто реализовывать тестовый метод (метод, начинающийся с test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nCW99HVXnXcQ","outputId":"9539d97f-95b0-47eb-c335-5736bbac9f5c"},"outputs":[{"name":"stderr","output_type":"stream","text":[".\n","----------------------------------------------------------------------\n","Ran 1 test in 0.001s\n","\n","OK\n"]}],"source":["class DefaultWidgetSizeTestCase(unittest.TestCase):\n","    def test_default_widget_size(self):\n","        widget = Widget('The widget')\n","        self.assertEqual(widget.size(), (50, 50))\n","\n","if __name__ == '__main__':\n","\n","    unittest.main(argv=['',], defaultTest='DefaultWidgetSizeTestCase', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"7Khd9GiUnXcQ"},"source":["Тестов может быть много, и часть кода настройки может повторяться. К счастью, мы можем определить код настройки путём реализации метода `setUp()`, который будет запускаться **перед каждым тестом**.\n","\n","Мы также можем определить метод `tearDown()`, который будет запускаться **после каждого теста**."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V6KO74qJnXcR","outputId":"176919ef-25d8-476a-8e5d-1b3faf49c7db"},"outputs":[{"name":"stderr","output_type":"stream","text":[".E\n","======================================================================\n","ERROR: test_widget_resize (__main__.SimpleWidgetTestCase)\n","----------------------------------------------------------------------\n","Traceback (most recent call last):\n","  File \"/tmp/ipykernel_564/3320321508.py\", line 10, in test_widget_resize\n","    self.widget.resize(100,150)\n","AttributeError: 'Widget' object has no attribute 'resize'\n","\n","----------------------------------------------------------------------\n","Ran 2 tests in 0.002s\n","\n","FAILED (errors=1)\n"]}],"source":["class SimpleWidgetTestCase(unittest.TestCase):\n","    def setUp(self):\n","        self.widget = Widget('The widget')\n","\n","    def test_default_widget_size(self):\n","        self.assertEqual(self.widget.size(), (50,50),\n","                         'incorrect default size')\n","\n","    def test_widget_resize(self):\n","        self.widget.resize(100,150)\n","        self.assertEqual(self.widget.size(), (100,150),\n","                         'wrong size after resize')\n","\n","    def tearDown(self):\n","        pass\n","\n","if __name__ == '__main__':\n","    unittest.main(argv=['',], defaultTest='SimpleWidgetTestCase', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"jxM7fQgwnXcR"},"source":["Можно разместить все тесты в том же файле, что и сама программа (таком как *widgets.py*), но размещение тестов в отдельном файле (таком как *test_widget.py*) имеет много преимуществ:\n","\n","- Модуль с тестом может быть запущен автономно из командной строки.\n","- Тестовый код может быть легко отделён от программы.\n","- Меньше искушения изменить тесты для соответствия коду программы без видимой причины.\n","- Тестовый код должен изменяться гораздо реже, чем программа.\n","- Протестированный код может быть легче переработан.\n","- Тесты для модулей на C должны быть в отдельных модулях, так почему же не быть последовательным?\n","- Если стратегия тестирования изменяется, нет необходимости изменения кода программы."]},{"cell_type":"markdown","metadata":{"id":"RKu5hdolnXcR"},"source":["## Пропуск тестов и ожидаемые ошибки\n","\n","`unittest` поддерживает пропуск отдельных тестов, а также классов тестов. Вдобавок, поддерживается пометка теста как *\"не работает, но так и надо\"*.\n","\n","Пропуск теста осуществляется использованием декоратора `skip()` или одного из его условных вариантов:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UrkuxslPnXcR","outputId":"4e9082cd-35f7-4e31-debc-1b6b7f822b1d"},"outputs":[{"name":"stderr","output_type":"stream","text":["test_format (__main__.MyTestCase) ... skipped 'not supported in this library version'\n","test_nothing (__main__.MyTestCase) ... skipped 'demonstrating skipping'\n","test_windows_support (__main__.MyTestCase) ... skipped 'requires Windows'\n","\n","----------------------------------------------------------------------\n","Ran 3 tests in 0.002s\n","\n","OK (skipped=3)\n"]}],"source":["__version__ = (0, 9)\n","platform = \"ubuntu\"\n","\n","\n","class MyTestCase(unittest.TestCase):\n","    @unittest.skip(\"demonstrating skipping\")\n","    def test_nothing(self):\n","        self.fail(\"shouldn't happen\")\n","\n","    @unittest.skipIf(__version__ < (1, 3), \"not supported in this library version\")\n","    def test_format(self):\n","        # Tests that work for only a certain version of the library.\n","        pass\n","\n","    @unittest.skipUnless(platform.startswith(\"win\"), \"requires Windows\")\n","    def test_windows_support(self):\n","        # windows specific testing code\n","        pass\n","\n","if __name__ == '__main__':\n","    unittest.main(argv=['','-v'], defaultTest='MyTestCase', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"7KvocEpEnXcS"},"source":["Классы также могут быть пропущены:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W5AxSP6tnXcS","outputId":"ed1a8120-c977-4687-b0d7-82ed3c98439b"},"outputs":[{"name":"stderr","output_type":"stream","text":["test_not_run (__main__.MySkippedTestCase) ... skipped 'showing class skipping'\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.001s\n","\n","OK (skipped=1)\n"]}],"source":["@unittest.skip(\"showing class skipping\")\n","class MySkippedTestCase(unittest.TestCase):\n","    def test_not_run(self):\n","        pass\n","\n","if __name__ == '__main__':\n","\n","    unittest.main(argv=['','-v'], defaultTest='MySkippedTestCase', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"RdTaIzNfnXcS"},"source":["Тесты, в которых ожидаются ошибки, используют декоратор `expectedFailure()`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GakcM6fsnXcS","outputId":"974d947e-8c77-4215-a30b-c253197eebfb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710241427636,"user_tz":-180,"elapsed":435,"user":{"displayName":"Бояров Алексей","userId":"05058840961708249492"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["test_fail (__main__.ExpectedFailureTestCase) ... expected failure\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.009s\n","\n","OK (expected failures=1)\n"]}],"source":["class ExpectedFailureTestCase(unittest.TestCase):\n","    @unittest.expectedFailure\n","    def test_fail(self):\n","        self.assertEqual(1, 0, \"broken\")\n","\n","if __name__ == '__main__':\n","    unittest.main(argv=['','-v'], defaultTest='ExpectedFailureTestCase', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"b0pDPOiTnXcT"},"source":["Очень просто сделать свой декоратор. Например, следующий декоратор пропускает тест, если переданный объект не имеет указанного атрибута:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbfhKNM6nXcT","outputId":"e4ee40eb-02db-4a94-ab60-b7624a7ee3ba","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710241526195,"user_tz":-180,"elapsed":367,"user":{"displayName":"Бояров Алексей","userId":"05058840961708249492"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["test_fail (__main__.YetAnotherTestCase) ... skipped \"[1, 2, 3] doesn't have add\"\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.008s\n","\n","OK (skipped=1)\n"]}],"source":["obj1 = [1, 2, 3]\n","\n","def skipUnlessHasattr(obj, attr):\n","    if hasattr(obj, attr):\n","        return lambda func: func\n","    return unittest.skip(f\"{obj} doesn't have {attr}\")\n","\n","class YetAnotherTestCase(unittest.TestCase):\n","    @skipUnlessHasattr(obj1,'add')\n","    def test_fail(self):\n","        pass\n","\n","if __name__ == '__main__':\n","    unittest.main(argv=['','-v'], defaultTest='YetAnotherTestCase', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"ksHdCHZDnXcT"},"source":["**Замечание** - для пропущенных тестов не запускаются `setUp()` и `tearDown()`, для пропущенных классов не запускаются `setUpClass()` и `tearDownClass()`, для пропущенных модулей не запускаются `setUpModule()` и `tearDownModule()`."]},{"cell_type":"markdown","metadata":{"id":"UUqVTreWnXcT"},"source":["Эй, а что ещё за `setUpClass()` и `setUpModule()`?"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4MX0l4GtnXcT"},"outputs":[],"source":["import unittest\n","\n","class Test(unittest.TestCase):\n","    @classmethod\n","    def setUpClass(cls):\n","        cls._connection = createExpensiveConnectionObject()\n","\n","    @classmethod\n","    def tearDownClass(cls):\n","        cls._connection.destroy()\n","\n","\n","#These should be implemented as functions:\n","def setUpModule():\n","    createConnection()\n","\n","def tearDownModule():\n","    closeConnection()\n","\n","del setUpModule\n","del tearDownModule"]},{"cell_type":"markdown","metadata":{"id":"ieGBR2ffnXcT"},"source":["## Различение итераций теста с помощью подтестов\n","\n","Когда некоторые тесты имеют лишь незначительные отличия, например некоторые параметры, `unittest` позволяет различать их внутри одного тестового метода, используя менеджер контекста `subTest()`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bidY5u5bnXcU","outputId":"04d844bc-2b64-44eb-9b1d-e1066b50225b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710241759959,"user_tz":-180,"elapsed":423,"user":{"displayName":"Бояров Алексей","userId":"05058840961708249492"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["test_even (__main__.NumbersTest)\n","Test that numbers between 0 and 3 are all even ... \n","======================================================================\n","FAIL: test_even (__main__.NumbersTest) (i=1)\n","Test that numbers between 0 and 3 are all even\n","----------------------------------------------------------------------\n","Traceback (most recent call last):\n","  File \"<ipython-input-12-e2eb267896ab>\", line 6, in test_even\n","    self.assertEqual(i % 2, 0)\n","AssertionError: 1 != 0\n","\n","======================================================================\n","FAIL: test_even (__main__.NumbersTest) (i=3)\n","Test that numbers between 0 and 3 are all even\n","----------------------------------------------------------------------\n","Traceback (most recent call last):\n","  File \"<ipython-input-12-e2eb267896ab>\", line 6, in test_even\n","    self.assertEqual(i % 2, 0)\n","AssertionError: 1 != 0\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.004s\n","\n","FAILED (failures=2)\n"]},{"output_type":"execute_result","data":{"text/plain":["<unittest.main.TestProgram at 0x7b26471879a0>"]},"metadata":{},"execution_count":12}],"source":["class NumbersTest(unittest.TestCase):\n","    def test_even(self):\n","        \"\"\"Test that numbers between 0 and 3 are all even\"\"\"\n","        for i in range(0, 4):\n","            with self.subTest(i=i):\n","                self.assertEqual(i % 2, 0)\n","\n","unittest.main(argv=['','-v'], defaultTest='NumbersTest', exit=False)"]},{"cell_type":"markdown","metadata":{"id":"sKHkT5cHnXcY"},"source":["Можем кастомизировать запуск имеющихся тестов:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"My7j6Q6UnXcY","outputId":"b7d06f00-1741-4dec-81f2-87c520bb068d"},"outputs":[{"name":"stderr","output_type":"stream","text":["test_default_widget_size (__main__.SimpleWidgetTestCase) ... ok\n","test_widget_resize (__main__.SimpleWidgetTestCase) ... ERROR\n","test_even (__main__.NumbersTest)\n","Test that numbers between 0 and 3 are all even ... test_fail (__main__.YetAnotherTestCase) ... skipped \"[1, 2, 3] doesn't have add\"\n","\n","======================================================================\n","ERROR: test_widget_resize (__main__.SimpleWidgetTestCase)\n","----------------------------------------------------------------------\n","Traceback (most recent call last):\n","  File \"/tmp/ipykernel_564/3320321508.py\", line 10, in test_widget_resize\n","    self.widget.resize(100,150)\n","AttributeError: 'Widget' object has no attribute 'resize'\n","\n","======================================================================\n","FAIL: test_even (__main__.NumbersTest) (i=1)\n","Test that numbers between 0 and 3 are all even\n","----------------------------------------------------------------------\n","Traceback (most recent call last):\n","  File \"/tmp/ipykernel_564/1820876951.py\", line 6, in test_even\n","    self.assertEqual(i % 2, 0)\n","AssertionError: 1 != 0\n","\n","======================================================================\n","FAIL: test_even (__main__.NumbersTest) (i=3)\n","Test that numbers between 0 and 3 are all even\n","----------------------------------------------------------------------\n","Traceback (most recent call last):\n","  File \"/tmp/ipykernel_564/1820876951.py\", line 6, in test_even\n","    self.assertEqual(i % 2, 0)\n","AssertionError: 1 != 0\n","\n","----------------------------------------------------------------------\n","Ran 4 tests in 0.005s\n","\n","FAILED (failures=2, errors=1, skipped=1)\n"]}],"source":["def MySuite():\n","    suite = unittest.TestSuite()\n","    suite.addTest(SimpleWidgetTestCase('test_default_widget_size'))\n","    suite.addTest(SimpleWidgetTestCase('test_widget_resize'))\n","    suite.addTest(NumbersTest('test_even'))\n","    suite.addTest(YetAnotherTestCase('test_fail'))\n","    return suite\n","\n","if __name__ == '__main__':\n","    runner = unittest.TextTestRunner(verbosity=2)\n","    runner.run(MySuite())"]},{"cell_type":"markdown","metadata":{"id":"KAYA_ue8nXcZ"},"source":["## Проверки на успешность\n","\n","Модуль unittest предоставляет множество функций для самых различных проверок:\n","\n","- `assertEqual(a, b)` — `a == b`\n","- `assertNotEqual(a, b)` — `a != b`\n","- `assertTrue(x)` — `bool(x) is True`\n","- `assertFalse(x)` — `bool(x) is False`\n","- `assertIs(a, b)` — `a is b`\n","- `assertIsNot(a, b)` — `a is not b`\n","- `assertIsNone(x)` — `x is None`\n","- `assertIsNotNone(x)` — `x is not None`\n","- `assertIn(a, b)` — `a in b`\n","- `assertNotIn(a, b)` — `a not in b`\n","- `assertCountEqual(a, b)` — `a` и `b` содержат те же элементы в одинаковых количествах, но порядок не важен"]},{"cell_type":"markdown","metadata":{"id":"8vxhABwsnXcZ"},"source":["- `assertIsInstance(a, b)` — `isinstance(a, b)`\n","- `assertNotIsInstance(a, b)` — `not isinstance(a, b)`\n","- `assertRaises(exc, fun, *args, **kwds)` — `fun(*args, **kwds)` порождает исключение exc\n","- `assertRaisesRegex(exc, r, fun, *args, **kwds)` — `fun(*args, **kwds)` порождает исключение `exc` и сообщение соответствует регулярному выражению `r`\n","- `assertWarns(warn, fun, *args, **kwds)` — `fun(*args, **kwds)` порождает предупреждение\n","- `assertWarnsRegex(warn, r, fun, *args, **kwds)` — `fun(*args, **kwds)` порождает предупреждение и сообщение соответствует регулярному выражению `r`\n","- `assertAlmostEqual(a, b)` — `round(a-b, 7) == 0`\n","- `assertNotAlmostEqual(a, b)` — `round(a-b, 7) != 0`\n","- `assertGreater(a, b)` — `a > b`\n","- `assertGreaterEqual(a, b)` — `a >= b`\n","- `assertLess(a, b)` — `a < b`\n","- `assertLessEqual(a, b)` — `a <= b`\n","- `assertRegex(s, r)` — `r.search(s)`\n","- `assertNotRegex(s, r)` — `not r.search(s)`"]}],"metadata":{"celltoolbar":"Слайд-шоу","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"colab":{"provenance":[{"file_id":"11T8nC1Yt3g70HMsS_Fq7w7ct8wfBFRrA","timestamp":1701615757784}]}},"nbformat":4,"nbformat_minor":0}