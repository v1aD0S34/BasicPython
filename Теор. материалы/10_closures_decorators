{"nbformat":4,"nbformat_minor":0,"metadata":{"celltoolbar":"Slideshow","kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"colab":{"provenance":[{"file_id":"1-swZyLjx_VadbfSS9iaCHOAf4N9qmoit","timestamp":1707641945400},{"file_id":"1m4u2231cRm-FS8_SLWP4rHnssgPYyVPb","timestamp":1706846418391},{"file_id":"1w4QF4JgbiVslz_cEHflhY3-jgNvjdrQe","timestamp":1675611044899},{"file_id":"1oA352-c7vCwFRKVjDrDEZjToFzviudyj","timestamp":1663141740636},{"file_id":"1u8_8r0YTGjiTCM-GKvAkB7btOxVeH759","timestamp":1648630277876},{"file_id":"https://github.com/febos/mipt-python-21spring/blob/master/Seminar4/Seminar04.ipynb","timestamp":1638807093012}],"collapsed_sections":["WFV2Bv8HQqyY"]}},"cells":[{"cell_type":"markdown","metadata":{"id":"J5smv7vyg6VO"},"source":["# Замыкания (Closures)"]},{"cell_type":"markdown","source":[">In computer programming languages, a closure is a function together with a referencing environment of that function. A closure function is any function that uses a variable that is defined in an environment (or scope) that is external to that function, and is accessible within the function when invoked from a scope in which that free variable is not defined.\n","\n","**Замыкание** (closure) — функция, в теле которой присутствуют ссылки на переменные, объявленные вне тела этой функции в окружающем коде и не являющиеся ее параметрами.\n","\n","Существования замыканий следует из правила LEGB, возможности оперировать с функциями как обьектами и того что области видимости в Питоне - статические."],"metadata":{"id":"g2yyXNBZm-Fg"}},{"cell_type":"markdown","source":["$$f(x) = a x^2 + 2x +1$$\n","\n","$a$ не определяется внутри функции $f(x)$, но используется при вычислении"],"metadata":{"id":"Efj7JzKY_dRW"}},{"cell_type":"code","source":["a = 1\n","\n","def f(x):\n","    return a * x ** 2 + 2 * x + 1"],"metadata":{"id":"NS4jTDWI_-ia"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cCIYrxpyAC2d","executionInfo":{"status":"ok","timestamp":1706858413027,"user_tz":-180,"elapsed":9,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"1e17d160-b47b-4f23-f5df-3d08cbf3d256"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":82}]},{"cell_type":"markdown","source":["Посмотрим на примере почему важны замыкания. Хотим создать список функций, которые домножают аргумент-число на множитель:"],"metadata":{"id":"4lrOuGHh_ciG"}},{"cell_type":"code","source":["multipliers = []\n","\n","for m in range(5):\n","    multipliers.append(lambda x: x * m)"],"metadata":{"id":"q39rxe-aDN9b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('m =', m)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dXk94vaWDO1m","executionInfo":{"status":"ok","timestamp":1706858494533,"user_tz":-180,"elapsed":320,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"4e124d5c-c0b5-4264-d321-8bfae62a0470"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["m = 4\n"]}]},{"cell_type":"code","metadata":{"id":"DG-v5dDtg6VO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706858498423,"user_tz":-180,"elapsed":305,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"f01f4f39-0d49-43ef-e4b1-c97267f34ace"},"source":["[multipliers[i](5) for i in range(5)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[20, 20, 20, 20, 20]"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["multipliers[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U7UaKF5VClgg","executionInfo":{"status":"ok","timestamp":1675767922173,"user_tz":-180,"elapsed":502,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ad4b1abe-870e-4ab7-ec13-ad176ae733d5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.<lambda>(x)>"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["multipliers[0](5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MRiTu_qFCof8","executionInfo":{"status":"ok","timestamp":1706858530794,"user_tz":-180,"elapsed":297,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"2ca97299-bda0-4d39-ff89-515cd0292ad1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["Почему получаем `[20, 20, 20, 20, 20]`, а не `[0, 5, 10, 15, 20]`?\n","\n","В наших лямбда-функциях нет объявления переменной `m`, поэтому интерпретатор ищет (и находит) переменную в глобальной области видимости. Поэтому при вызове наших анонимных функций будет использоваться глобальная переменная `m`, которая может поменяться между созданием функции и вызова функции. В итоге все наши лямбда-функции ссылаются на одно и ту же переменную `m` - глобальную переменную.\n","\n","Поэтому если мы поменяем переменную `m`, то поменяется и поведение наших функций:"],"metadata":{"id":"pUGfrALGoGqW"}},{"cell_type":"code","source":["m = 0\n","\n","print([multipliers[i](5) for i in range(5)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bqJX8GhDpudb","executionInfo":{"status":"ok","timestamp":1675768012773,"user_tz":-180,"elapsed":217,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"fafe8ef1-1e07-4478-b687-4620e09810e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 0, 0, 0, 0]\n"]}]},{"cell_type":"code","source":["multipliers[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vs4Pp9FyCXPS","executionInfo":{"status":"ok","timestamp":1663176378514,"user_tz":-180,"elapsed":20,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"dc5132b7-7c0a-41ac-b5f3-b35c53f09271"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.<lambda>(x)>"]},"metadata":{},"execution_count":184}]},{"cell_type":"markdown","source":["По сути, это эквивалентно следующему примеру:"],"metadata":{"id":"Pj_fo1BXfZcL"}},{"cell_type":"code","source":["def fn1(x):\n","    return m * x\n","\n","def fn2(x):\n","    return m * x\n","\n","def fn3(x):\n","    return m * x\n","\n","multipliers = [fn1, fn2, fn3]\n","\n","m = 5\n","\n","print([multipliers[i](5) for i in range(3)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9XUTIRcS0ZyA","executionInfo":{"status":"ok","timestamp":1675768034596,"user_tz":-180,"elapsed":323,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"590265ab-934f-4867-bb64-872f9486894e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[25, 25, 25]\n"]}]},{"cell_type":"code","source":["multipliers[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hF-_LMw3CQfr","executionInfo":{"status":"ok","timestamp":1663176357222,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"900afeae-3b89-418a-8f17-2371155ab6bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.fn1(x)>"]},"metadata":{},"execution_count":180}]},{"cell_type":"markdown","source":["Рассмотрим это на более простом примере:"],"metadata":{"id":"8X3j28y6p4L2"}},{"cell_type":"code","metadata":{"id":"jEfmQXcbvTJ-"},"source":["def function(a, b):\n","    return NAME, a, b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"qQLc5y1HvcUf","executionInfo":{"status":"error","timestamp":1675768182602,"user_tz":-180,"elapsed":16,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1516c3fc-06de-43ec-d51e-512c67315ea1"},"source":["#del NAME\n","\n","function(1, 2)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-85-072896dfd5da>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#del NAME\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-83-fda0defd87ac>\u001b[0m in \u001b[0;36mfunction\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mNAME\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'NAME' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hvC2MgOJvgsQ","executionInfo":{"status":"ok","timestamp":1675768187124,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"14e12cac-f200-465f-945a-b90eff2bbdf9"},"source":["NAME = 'Alice'\n","function(1, 2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('Alice', 1, 2)"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["NAME = 'Bob'\n","function(1, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AJ0U8aCeEwAC","executionInfo":{"status":"ok","timestamp":1675768198221,"user_tz":-180,"elapsed":391,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8fdca0ca-bddc-4fee-ead0-28aa363f0e42"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('Bob', 1, 2)"]},"metadata":{},"execution_count":87}]},{"cell_type":"markdown","source":["Чтобы использовать переменные, которые определены вне функции, но хранить их не в глобальной области видимости, удобно использовать следующую конструкцию:"],"metadata":{"id":"M70QCUdcp65u"}},{"cell_type":"code","source":["def foo():\n","    #x = 3\n","\n","    def bar():\n","        print(x)\n","\n","    x = 5\n","    return bar"],"metadata":{"id":"aQGEDuqZFFRs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bar_global = foo()\n","bar_global()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vK2hJevEFd7I","executionInfo":{"status":"ok","timestamp":1706858766359,"user_tz":-180,"elapsed":289,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"699ac086-d265-40b1-8d0f-ebabad16dcd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","metadata":{"id":"tM4RtNzNg6VO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706858770149,"user_tz":-180,"elapsed":424,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"f6d0295d-9c75-4a9b-9718-11774437ceb7"},"source":["x = 9\n","bar_global()\n","print('x =', x)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","x = 9\n"]}]},{"cell_type":"markdown","source":["Теперь функция bar ссылается на переменную `x` из enclosing области видимости, и поэтому при изменении глобальной переменной `x` поведение функции не изменяется."],"metadata":{"id":"dQtn448-vSGx"}},{"cell_type":"markdown","source":["Рассмотрим более сложный пример:"],"metadata":{"id":"8vLc1qedvMs9"}},{"cell_type":"code","metadata":{"id":"hJTv_tOZg6VO"},"source":["def make_adder(x):\n","    def adder(y):\n","        return x + y\n","    return adder"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["add_two = make_adder(2)\n","\n","print(add_two(5))\n","print(add_two(7))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-lETO3c_Ga4l","executionInfo":{"status":"ok","timestamp":1706858842292,"user_tz":-180,"elapsed":8,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"109dcf56-c227-4fb2-e20d-7c69693ec890"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["7\n","9\n"]}]},{"cell_type":"code","source":["add_three = make_adder(3)\n","\n","add_three(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MrS02QRMHLoz","executionInfo":{"status":"ok","timestamp":1706858850819,"user_tz":-180,"elapsed":292,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"677ad589-1b14-4743-fbdd-96aebaa20291"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["def make_adder(x):\n","    def adder(y):\n","        return x + y\n","    def adder1(z):\n","        return x + z * 2\n","    return adder, adder1"],"metadata":{"id":"KTsrDShAIN_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["adder_global, adder1_global = make_adder(42)"],"metadata":{"id":"6J5TJ4a0IYZG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["adder_global(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9KiHs8u1Idir","executionInfo":{"status":"ok","timestamp":1675768965154,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d67eb380-8a2b-451a-972b-1b3a34f67b87"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["43"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["adder1_global(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7AHx0OgIe2d","executionInfo":{"status":"ok","timestamp":1675768965155,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e82e4547-6e59-4606-9637-ceab1f61f965"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["44"]},"metadata":{},"execution_count":104}]},{"cell_type":"markdown","metadata":{"id":"JB4yGTxyg6VO"},"source":["Функции могут замыкать одинаковые переменные"]},{"cell_type":"code","metadata":{"id":"WRR2Wk8Qg6VP"},"source":["value1 = 0\n","\n","def cell1(value=0):\n","    def Get():  # функции принято называть как и переменные - с маленькой буквы, здесь игнорируем чтобы лучше различать внутренние и внешние функции\n","        return value\n","\n","    def Set(new_value):\n","        nonlocal value\n","        value = new_value\n","\n","    return Get, Set"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Get, Set = cell1(10)\n","print(Get())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZCsRBUnMI_Xt","executionInfo":{"status":"ok","timestamp":1706859136386,"user_tz":-180,"elapsed":8,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"f236664f-b09d-4cf2-f2c3-0b968a6e27d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n"]}]},{"cell_type":"code","source":["Set(20)\n","print(Get())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7H72_k5RJCzK","executionInfo":{"status":"ok","timestamp":1706859155295,"user_tz":-180,"elapsed":355,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"ce9e0bc6-c60d-4617-b547-f09cec7db157"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["20\n"]}]},{"cell_type":"markdown","metadata":{"id":"A5AplKKOg6VP"},"source":["Посмотрим, что внутри замыкания:"]},{"cell_type":"code","metadata":{"id":"E2cM9D-sg6VP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675769282627,"user_tz":-180,"elapsed":502,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"7cabb997-7b35-4270-d9b8-5a052fad2bf4"},"source":["print(Get.__closure__, type(Get.__closure__))\n","print(Get.__closure__[0].cell_contents)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(<cell at 0x7f22fa3a0c70: int object at 0x9570a0>,) <class 'tuple'>\n","20\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y7IvJbzvg6VP"},"source":["**\\_\\_closure\\_\\_** &mdash; список замкнутых переменных.<br>\n","Переменная представлена в виде класса **cell** с единственным полем **cell_contents**"]},{"cell_type":"code","metadata":{"id":"bhZYGGjBg6VP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706859191782,"user_tz":-180,"elapsed":508,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"822f687b-69e6-42eb-9e03-be3f9a82050a"},"source":["print(Get.__closure__ == Set.__closure__)\n","print(Get.__closure__[0] is Set.__closure__[0])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n"]}]},{"cell_type":"markdown","metadata":{"id":"Iz6DmABeg6VQ"},"source":["# Декораторы"]},{"cell_type":"markdown","source":["В качестве аргумента для внешней функции можем передать не только числа, но и функцию!\n","\n","Поэтому замыкания можно использовать для быстрого изменения поведения функции."],"metadata":{"id":"ioCAnoVGw5Ak"}},{"cell_type":"code","metadata":{"id":"GFbj9mJng6VQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706859344517,"user_tz":-180,"elapsed":11,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"fcac3b75-b692-44de-c7d2-faa550825dd5"},"source":["def deprecate(func):\n","    def inner(*args, **kwargs):\n","        print('WARNING: ' + func.__name__ +' is deprecated')\n","        return func(*args, **kwargs)\n","    return inner\n","\n","pprint = deprecate(print)\n","\n","pprint([1, 2, 3], '123', sep='\\n', end='!!!')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: print is deprecated\n","[1, 2, 3]\n","123!!!"]}]},{"cell_type":"code","source":["mmax = deprecate(max)\n","mmax(3,4,5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wYQ0SLcQQS-u","executionInfo":{"status":"ok","timestamp":1706859437446,"user_tz":-180,"elapsed":297,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"4f724af7-d205-44d5-988b-8963c919f22f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: max is deprecated\n"]},{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":101}]},{"cell_type":"markdown","source":["Теперь перед выполнением функции получаем сообщение. Аналогично можем менять поведение и наших функций:"],"metadata":{"id":"ZnYPO-MI37Bw"}},{"cell_type":"code","source":["def own_max(a, b):\n","    'This is a really nice looking docstring'\n","    return a if a > b else b"],"metadata":{"id":"h5ra7Esz6Eyh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["own_max(3, 4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"llSpzyOVQrux","executionInfo":{"status":"ok","timestamp":1706859451096,"user_tz":-180,"elapsed":329,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"31eae3a0-2abe-4446-cc45-58f42cd3abb1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["new_own_max = deprecate(own_max)\n","new_own_max(3, 4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E069sx4MQtYo","executionInfo":{"status":"ok","timestamp":1706859453807,"user_tz":-180,"elapsed":8,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"b214c987-4828-40c9-ee4f-8389875af3af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: own_max is deprecated\n"]},{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["deprecate(own_max)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IfuxXXpIRJyN","executionInfo":{"status":"ok","timestamp":1675769633181,"user_tz":-180,"elapsed":204,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"050cd98a-64a9-4f31-ff8b-d90717548fda"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.deprecate.<locals>.inner(*args, **kwargs)>"]},"metadata":{},"execution_count":120}]},{"cell_type":"markdown","source":["Каждый раз переопределять функцию через присвоение неудобно, поэтому Python поддерживает более удобный механизм - декорирование:"],"metadata":{"id":"FYVanHh26dA0"}},{"cell_type":"code","metadata":{"id":"zBXd_BScg6VQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706859576352,"user_tz":-180,"elapsed":300,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"a86637d1-6ee3-4420-ae71-38db018ffaec"},"source":["def deprecated(func):\n","    def wrapper(*args, **kwargs):  # Теперь внутренняя функция называется не inner, а wrapper (обертка)\n","        print('WARNING: ' + func.__name__ +' is deprecated')\n","        return func(*args, **kwargs)\n","    return wrapper\n","\n","def congrats(func):\n","    def wrapper(*args, **kwargs):  # Теперь внутренняя функция называется не inner, а wrapper (обертка)\n","        print('Congratulations: ' + func.__name__ +' is awesome function')\n","        return func(*args, **kwargs)\n","    return wrapper\n","\n","\n","@congrats\n","@deprecated\n","def own_max(a, b):\n","    'This is a really nice looking docstring'\n","    return a if a > b else b\n","\n","own_max(1, 2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Congratulations: wrapper is awesome function\n","WARNING: own_max is deprecated\n"]},{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":["new_own_max = congrats(deprecate(own_max))"],"metadata":{"id":"3dsUygpAUL31"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_own_max(1, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cmF4WXLdUULX","executionInfo":{"status":"ok","timestamp":1706859585049,"user_tz":-180,"elapsed":276,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"5de0126d-d027-4259-f619-e89d882cc1fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Congratulations: inner is awesome function\n","WARNING: wrapper is deprecated\n","Congratulations: wrapper is awesome function\n","WARNING: own_max is deprecated\n"]},{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":["help(own_max)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cuIhXRtRUjLg","executionInfo":{"status":"ok","timestamp":1706859587338,"user_tz":-180,"elapsed":8,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"2dfc2b85-1000-4fb0-a000-6f134a26af1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on function wrapper in module __main__:\n","\n","wrapper(*args, **kwargs)\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"6AkzThvCg6VQ"},"source":["Но у такого подхода есть проблема:"]},{"cell_type":"code","metadata":{"id":"MWM6kOkfg6VR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675769907515,"user_tz":-180,"elapsed":208,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1ca70018-7d8b-45cd-967e-45bb25d4284c"},"source":["print(own_max.__name__)\n","print(own_max.__doc__)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["wrapper\n","None\n"]}]},{"cell_type":"markdown","metadata":{"id":"JDYDw0Weg6VR"},"source":["**Решение 1** - явно переписать атрибуты функции `wrapper`:"]},{"cell_type":"code","metadata":{"id":"n44t9Fwgg6VR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706859647007,"user_tz":-180,"elapsed":282,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"bf584e17-6fbf-4f5d-ffc8-26d33572e747"},"source":["def deprecated(func):\n","    def wrapper(*args, **kwargs):\n","        print('WARNING: ' + func.__name__ +' is deprecated')\n","        return func(*args, **kwargs)\n","    wrapper.__name__ = func.__name__\n","    wrapper.__doc__ = func.__doc__\n","    wrapper.__module__ = func.__module__\n","    # Может переписать и другие необходимые атрибуты\n","    return wrapper\n","\n","@deprecated\n","def own_max(a, b):\n","    'This is a really nice looking docstring'\n","    return a if a > b else b\n","\n","own_max(1, 2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: own_max is deprecated\n"]},{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["print(own_max.__name__)\n","print(own_max.__doc__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9LGIcKwVVUEX","executionInfo":{"status":"ok","timestamp":1706859650029,"user_tz":-180,"elapsed":305,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"d3689602-57f3-4d59-ec28-4ccf50cc5cd9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["own_max\n","This is a really nice looking docstring\n"]}]},{"cell_type":"markdown","metadata":{"id":"zluCUfBtg6VR"},"source":["**Решение 2** - использовать декоратор из модуля `functools`:"]},{"cell_type":"code","metadata":{"id":"yl4PrRmTg6VS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706859692704,"user_tz":-180,"elapsed":276,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"88d2cd20-16a3-4aec-b01d-3629b446c9b1"},"source":["import functools\n","\n","def deprecated(func):\n","    @functools.wraps(func)\n","    def wrapper(*args, **kwargs):\n","        print('WARNING: ' + func.__name__ +' is deprecated')\n","        return func(*args, **kwargs)\n","    return wrapper\n","\n","@deprecated\n","def own_max(a, b):\n","    'This is a really nice looking docstring'\n","    return a if a > b else b\n","\n","@deprecated\n","def own_min(a, b):\n","    'This is a really nice looking docstring also'\n","    return a if a < b else b\n","\n","print(own_max(1, 2))\n","print(own_min(1, 2))\n","\n","print(own_max.__name__)\n","print(own_max.__doc__)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: own_max is deprecated\n","2\n","WARNING: own_min is deprecated\n","1\n","own_max\n","This is a really nice looking docstring\n"]}]},{"cell_type":"code","source":["help(functools.wraps)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NRY_jP4xV4Ky","executionInfo":{"status":"ok","timestamp":1706859702338,"user_tz":-180,"elapsed":273,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"f4b39ffc-d5e3-4c04-8e33-4f5e231e3802"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on function wraps in module functools:\n","\n","wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))\n","    Decorator factory to apply update_wrapper() to a wrapper function\n","    \n","    Returns a decorator that invokes update_wrapper() with the decorated\n","    function as the wrapper argument and the arguments to wraps() as the\n","    remaining arguments. Default arguments are as for update_wrapper().\n","    This is a convenience function to simplify applying partial() to\n","    update_wrapper().\n","\n"]}]},{"cell_type":"code","source":["print(own_min.__name__)\n","print(own_min.__doc__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hNRM6792Vt84","executionInfo":{"status":"ok","timestamp":1663181452606,"user_tz":-180,"elapsed":275,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"825a8106-2386-4c87-85b2-7e19b2ed8c8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["own_min\n","This is a really nice looking docstring also\n"]}]},{"cell_type":"markdown","metadata":{"id":"COKksmu1g6VS"},"source":["Можем использовать декораторы и с аргументами:"]},{"cell_type":"code","metadata":{"id":"Hyphewh_g6VT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706859790376,"user_tz":-180,"elapsed":285,"user":{"displayName":"Никита Честнов","userId":"15332366944693592626"}},"outputId":"b019fc4b-3ec9-4631-9a21-14089f11120f"},"source":["import sys\n","\n","def trace(dest=sys.stderr):\n","    def wraps(func):\n","        @functools.wraps(func)\n","        def wrapper(*args, **kwargs):\n","            print(func.__name__ , 'called with args', args,'kwargs', kwargs, file = dest)\n","            return func(*args, **kwargs)\n","        return wrapper\n","    return wraps\n","\n","@trace(sys.stdout)\n","def f(x, test):\n","    if test > 1:\n","        return f(x, test / 2)\n","\n","f('Hi!', test=42)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["f called with args ('Hi!',) kwargs {'test': 42}\n","f called with args ('Hi!', 21.0) kwargs {}\n","f called with args ('Hi!', 10.5) kwargs {}\n","f called with args ('Hi!', 5.25) kwargs {}\n","f called with args ('Hi!', 2.625) kwargs {}\n","f called with args ('Hi!', 1.3125) kwargs {}\n","f called with args ('Hi!', 0.65625) kwargs {}\n"]}]},{"cell_type":"markdown","source":["## Extra. Классы как декораторы"],"metadata":{"id":"WFV2Bv8HQqyY"}},{"cell_type":"markdown","metadata":{"id":"PMWpD3jkg6VU"},"source":["Декораторам необязательно быть функциями"]},{"cell_type":"code","metadata":{"id":"ivPV9gIYg6VU"},"source":["from collections import Counter\n","\n","class Register(object):\n","    def __init__(self):\n","        self.stat = Counter()\n","\n","    def __call__(self, func):\n","        nm = func.__name__\n","        def wrapper(*args, **kwrags):\n","            self.stat[nm] += 1\n","            return func(*args, **kwrags)\n","        return wrapper\n","\n","    def __str__(self):\n","        result = 'fname\\tcallcount\\n'\n","        for name, count in self.stat.items():\n","            result += '{}:\\t{}\\n'.format(name, count)\n","        return result\n","\n","register = Register()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qUbDcVAog6VV"},"source":["@register\n","def f(x):\n","    return x\n","\n","@register\n","def q(x):\n","    return q"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CLxR0G9RZxh9","executionInfo":{"status":"ok","timestamp":1663182594962,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"998e3326-d0eb-49b3-b615-a9a6d8b87bfa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":299}]},{"cell_type":"code","source":["q(2)\n","q(4)\n","q(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q_QPt0I0Z1w8","executionInfo":{"status":"ok","timestamp":1663182595875,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f276befb-c6ce-47fb-ed05-a323da30abb5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.Register.__call__.<locals>.wrapper(*args, **kwrags)>"]},"metadata":{},"execution_count":300}]},{"cell_type":"code","source":["f(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ldA8Kan2Z3Z3","executionInfo":{"status":"ok","timestamp":1663182596583,"user_tz":-180,"elapsed":281,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"cc3ff2fb-4176-4623-a15d-4443548aec7a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":301}]},{"cell_type":"code","source":["print(register)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gqm0Ck-5Z0ZC","executionInfo":{"status":"ok","timestamp":1663182598171,"user_tz":-180,"elapsed":256,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e660f65f-ec46-4265-ebe0-5bf76b0a0643"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["fname\tcallcount\n","f:\t2\n","q:\t3\n","\n"]}]},{"cell_type":"code","source":["register(f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5VjIhwCsIHeU","executionInfo":{"status":"ok","timestamp":1648659163362,"user_tz":-180,"elapsed":236,"user":{"displayName":"Никита Николаевич Честнов","userId":"04102744290911048542"}},"outputId":"2fa3d8d5-d07e-4c9f-9238-8ac9f88e6773"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.Register.__call__.<locals>.wrapper>"]},"metadata":{},"execution_count":95}]},{"cell_type":"markdown","source":["# Практика"],"metadata":{"id":"3p8Ms5WHQgxE"}},{"cell_type":"markdown","source":["## Задача 1"],"metadata":{"id":"t1LQ8GATQnFf"}},{"cell_type":"markdown","metadata":{"id":"tkInkvp3g6VT"},"source":["Написать декоратор **once(function)**.<br>\n","Декоратор позволяет вызвать функцию только один раз."]},{"cell_type":"code","metadata":{"id":"5465qfyYg6VT"},"source":["import functools\n","\n","def once(func):\n","    # your code here"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sgQNqY3Ug6VU"},"source":["@once\n","def foo(x):\n","    print('Hi!', x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["foo(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FltGVcXVYiVq","executionInfo":{"status":"ok","timestamp":1663182378582,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"60c7a095-b61c-4110-cdb2-0a783e7a4cf4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hi! 5\n"]}]},{"cell_type":"code","source":["foo(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pp0sVrQXYvGA","executionInfo":{"status":"ok","timestamp":1663182378583,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2f166c1c-3287-4aef-d291-3d3008971154"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hi! 4\n"]}]},{"cell_type":"markdown","source":["## Задача 2"],"metadata":{"id":"dqprBT6BSLO0"}},{"cell_type":"markdown","source":["Напишите декоратор `timeit`, который будет замерять времени работы декорируемой функции и выводить его с помощью `print`:"],"metadata":{"id":"Ahw71weSSM_i"}},{"cell_type":"code","source":["import functools\n","\n","def timeit(func):\n","    # your code here"],"metadata":{"id":"L1z5nensSMHq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from time import sleep\n","\n","@timeit\n","def sleep_custom(x):\n","    print('Hi!')\n","    sleep(x)\n","    print(\"Bye!\")"],"metadata":{"id":"EmRPi9s9S-mW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sleep_custom(10)"],"metadata":{"id":"czRmVN78TOs7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sleep_custom(5)"],"metadata":{"id":"rCfZ5jhHTQ1G"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задача 3"],"metadata":{"id":"XMbY1O5ETkwu"}},{"cell_type":"markdown","source":["Напишите декоратор `cycle`, который принимает аргумент `N` и выполняет функцию `N` раз, и возвращает 5 выводов функции в виде кортежа:"],"metadata":{"id":"MGIJ_B3QTmeB"}},{"cell_type":"code","source":["# your code here"],"metadata":{"id":"aHBvdMciTmCN"},"execution_count":null,"outputs":[]}]}