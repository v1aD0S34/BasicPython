{"cells":[{"cell_type":"markdown","source":["# Генераторы"],"metadata":{"id":"8JCGSIaxD-F8"}},{"cell_type":"markdown","source":["Циклы позволяют удобно проходить по контейнерам и обрабатывать нужным нам образом их элементы, которые хранятся в оперативной.\n","\n","Но, к сожалению, это не всегда возможно. Какие могут быть причины:\n","- очень большой размер файла (десятки гигабайт) - мы хотим как-либо обработать его строки и проанализировать их содержимое, но не получится загрузить в оперативную память\n","- не можем сразу получить необходимые данные - данные могут передаваться непрерывным потоком, и нам необходимо этот поток данных как-либо преобразовать и выделить его полезные свойства\n","\n","В таких случаях нам на помощь приходит *генератор*.\n","\n"],"metadata":{"id":"2_Ci_rk0PL_w"}},{"cell_type":"markdown","source":["**Генератор** — это объект (\"тип данных\"), который сразу при создании не вычисляет значения всех своих элементов. Он хранит в памяти только последний вычисленный элемент, правило перехода к следующему и условие, при котором получение новых элементов прерывается.\n","\n","Вычисление следующего значения происходит лишь с помощью функции `next()`, т.е. лишь по необходимости. Предыдущее значение при этом теряется. Поэтому вычисления с помощью генераторов называются ленивыми."],"metadata":{"id":"hSzSYdF6R4e6"}},{"cell_type":"markdown","source":["В этом и заключается отличие от привычных нам контейнеров (списков, кортежей) - они хранят в памяти все свои элементы, и удалить их можно только программно."],"metadata":{"id":"1BN22q0RUNQV"}},{"cell_type":"markdown","source":["Генераторы можно создавать несколькими способами:\n","- генераторные выражения\n","- генераторные функции\n","- генераторные объекты"],"metadata":{"id":"ZPzMPS4MVQa7"}},{"cell_type":"markdown","source":["## Генераторные выражения"],"metadata":{"id":"9_ZtY_DvVhtr"}},{"cell_type":"markdown","source":["Самый простой способ создания генераторов - **генераторное выражение**. Оно требует контейнера, из элементов которых будут высчитываться. По синтаксису, генераторное выражение очень похоже на list comprehension, только окружено не квадратными, а круглыми скобками:"],"metadata":{"id":"_MGBeCDAWy-S"}},{"cell_type":"markdown","source":["```python\n","(<expression> for <item_variable> in <container>)\n","```"],"metadata":{"id":"jb_NcaoHXOou"}},{"cell_type":"markdown","source":["Познакомимся с ними поближе на примере генератора квадратов:"],"metadata":{"id":"fciIJgClX55a"}},{"cell_type":"code","source":["genexpr = (i**2 for i in range(1, 5))"],"metadata":{"id":"JSK5yUO1W_RI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["type(genexpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E5cvHm2uZbDH","executionInfo":{"status":"ok","timestamp":1663098538813,"user_tz":-180,"elapsed":414,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d6f98f8f-49da-4ac8-928a-f579b540ef85"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["generator"]},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","source":["Для получения элементов из него воспользуемся функцией `next`:"],"metadata":{"id":"t6NxeWpQYApj"}},{"cell_type":"code","source":["next(genexpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lCmH63P1YAPy","executionInfo":{"status":"ok","timestamp":1675164073854,"user_tz":-180,"elapsed":509,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"221c1bc4-9a25-44b9-b4da-a0d88fdc11bd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":93}]},{"cell_type":"markdown","source":["Попробуем снова получить элемент:"],"metadata":{"id":"eF6cwIcEYgZq"}},{"cell_type":"code","source":["next(genexpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zabB71GEYi0M","executionInfo":{"status":"ok","timestamp":1675164077852,"user_tz":-180,"elapsed":307,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"66e21b59-109b-4660-e9bc-17c430f1c5d5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["Получили следующий элемент. Попробуем и дальше получать элементы:"],"metadata":{"id":"nOTwUK8gYsjk"}},{"cell_type":"code","source":["next(genexpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wiWpDPw3YxCE","executionInfo":{"status":"ok","timestamp":1675164081386,"user_tz":-180,"elapsed":301,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"94cecc07-e15d-48aa-a1b8-5d34fe35f9e9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["next(genexpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9MF2yTHVYydO","executionInfo":{"status":"ok","timestamp":1675164083160,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"bf87e906-3341-4248-d74a-0ada9f4d0ea4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["16"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["next(genexpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"N7jt7mPAYzRF","executionInfo":{"status":"error","timestamp":1675164084213,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9d918a97-3eae-4624-edc4-725ed122ab0f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"StopIteration","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-97-b44198bbd1d7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenexpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mStopIteration\u001b[0m: "]}]},{"cell_type":"markdown","source":["Получили ошибку `StopIteration`. Эта ошибка является служебной, используется в цикле `for` для остановки его работы. Теперь посмотрим как генератор работает с циклом `for`:"],"metadata":{"id":"CF8mL_Q7Y1Dp"}},{"cell_type":"code","source":["for item in (i**2 for i in range(1, 5)):\n","    print(item)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1CteRjNua6bN","executionInfo":{"status":"ok","timestamp":1675164120936,"user_tz":-180,"elapsed":233,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8880d479-424a-47e4-f6d5-03873c157e05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","4\n","9\n","16\n"]}]},{"cell_type":"markdown","source":["Сравним память, используемую list comprehension и генераторным выражением. Для этого нам пригодится функция `getsizeof` из модуля системных функций `sys`:"],"metadata":{"id":"OSJNTtWDiYB5"}},{"cell_type":"code","source":["from sys import getsizeof\n","\n","help(getsizeof)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K3bfPoZ8ij5k","executionInfo":{"status":"ok","timestamp":1675164143620,"user_tz":-180,"elapsed":206,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ff396d7c-90d8-4dce-ca95-e4b4b1fdd8fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on built-in function getsizeof in module sys:\n","\n","getsizeof(...)\n","    getsizeof(object [, default]) -> int\n","    \n","    Return the size of object in bytes.\n","\n"]}]},{"cell_type":"markdown","source":["Память, используемая list comprehension квадратов чисел до 1 000 000:"],"metadata":{"id":"LJDnH6PHiykZ"}},{"cell_type":"code","source":["getsizeof([item ** 2 for item in range(1_000_000)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8U17QK3Ri4yI","executionInfo":{"status":"ok","timestamp":1675164171790,"user_tz":-180,"elapsed":601,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"825327a8-8b8d-4734-f7bd-c3f2cd7a853a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8697456"]},"metadata":{},"execution_count":101}]},{"cell_type":"markdown","source":["Память, используемая генераторным выражением для аналогичной задачи:"],"metadata":{"id":"lZImepmWjA5_"}},{"cell_type":"code","source":["getsizeof((item ** 2 for item in range(1_000_000)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vYcX-_XWigIZ","executionInfo":{"status":"ok","timestamp":1675164167101,"user_tz":-180,"elapsed":221,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"acc61969-487c-482d-a9ef-a78655f16064"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["112"]},"metadata":{},"execution_count":100}]},{"cell_type":"markdown","source":["Как видим, экономия памяти очевидна."],"metadata":{"id":"8TCVG44OjUiU"}},{"cell_type":"markdown","source":["## Генераторные функции"],"metadata":{"id":"XoN5RJl0a5tD"}},{"cell_type":"markdown","source":["Генераторные выражения - упрощенный способ создания **генераторных функций**.\n","\n","Генераторная функция отличается от обычной функции тем, что вместо команды `return` для возврата значения в ней используется `yield` - `return` завершает работу функции, а `yield` лишь приостанавливает её до следующего вызова генераторной функции.\n","\n","При первом вызове метода `next()` выполняется код функции с первой команды до `yield`. При втором `next()` и последующих до конца генератора — код со следующей после `yield` команды и до тех пор, пока `yield` не встретится снова."],"metadata":{"id":"dWw09g0tcae2"}},{"cell_type":"markdown","source":["Рассмотрим работу функции-генератора на примере. Создадим функцию-генератор для создания квадратов чисел со смещением:"],"metadata":{"id":"weFFC0aVd8N4"}},{"cell_type":"code","source":["def gen_fn(n):\n","    shift = 0\n","    for i in range(n):\n","        yield i ** 2 + shift\n","        shift += 1"],"metadata":{"id":"I9BpKxdqfvsQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Проверим тип созданной функции:"],"metadata":{"id":"fk71Rnuag-p-"}},{"cell_type":"code","source":["type(gen_fn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6KuLq3Fif91G","executionInfo":{"status":"ok","timestamp":1675164272170,"user_tz":-180,"elapsed":10,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5ef350a4-0390-4882-c4c3-409c60920a44"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["function"]},"metadata":{},"execution_count":103}]},{"cell_type":"markdown","source":["Сама по себе генераторная функция не является генератором,  но может создавать их при вызове:"],"metadata":{"id":"1eGUPoaMg2-c"}},{"cell_type":"code","source":["gen = gen_fn(5)\n","type(gen)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RK1eVqmPgEX0","executionInfo":{"status":"ok","timestamp":1675164274757,"user_tz":-180,"elapsed":222,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"63eb6c45-bec4-46a5-8189-c1d98f905460"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["generator"]},"metadata":{},"execution_count":104}]},{"cell_type":"markdown","source":["Проверим как работает с нашим новым генератором цикл `for`:"],"metadata":{"id":"4hhQWcyrhCtI"}},{"cell_type":"code","source":["for i in gen:\n","    print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m8W4wHCKgsuU","executionInfo":{"status":"ok","timestamp":1675164283602,"user_tz":-180,"elapsed":244,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"214f1721-6b8b-4eb9-a718-248936363cbf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","2\n","6\n","12\n","20\n"]}]},{"cell_type":"markdown","source":["С помощью генераторных функций можно создавать бесконечные генераторы, которые могут порождать новые элементы без остановки.\n","\n","Создадим генератор, который возвращает кубы натуральных чисел:"],"metadata":{"id":"UhyU9XFVhyJ1"}},{"cell_type":"code","source":["def cubes():\n","    i = 0\n","    while True:\n","        yield i ** 3\n","        i += 1"],"metadata":{"id":"34yB4QMEgsWJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Можем проверить его работу, запустив в цикле, но предварительно добавить счетчик для ручной остановки цикла:"],"metadata":{"id":"Wg8lRLtnkL18"}},{"cell_type":"code","source":["counter = 0\n","for item in cubes():\n","    print(item, end=' ')\n","    counter += 1\n","    if counter == 15:\n","        break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QoMEU7UlkUYP","executionInfo":{"status":"ok","timestamp":1675164310165,"user_tz":-180,"elapsed":233,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c7e60492-9e6a-43da-906c-bd4d53f56e41"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 1 8 27 64 125 216 343 512 729 1000 1331 1728 2197 2744 "]}]},{"cell_type":"markdown","source":["# Итераторы"],"metadata":{"id":"XhfmkqIKPNDr"}},{"cell_type":"markdown","source":["Минутка формальных определений в Python."],"metadata":{"id":"cjC51QWOMh3U"}},{"cell_type":"markdown","source":["**Итерируемый (iterable)** объект (переменная) - объект (переменная), от которого встроенная функция `iter()` может получить *итератор*.\n","\n","**Итератор** - объект (переменная), который позволяет получить элемент с помощью функции `next()`."],"metadata":{"id":"TjNVl3XsMOf_"}},{"cell_type":"markdown","source":["Их взаимосвязь можно описать схематично:\n","\n","![iters](https://pythonist.ru/wp-content/uploads/2020/10/1513840561502_6-1024x318.png)"],"metadata":{"id":"FZDamd-zv4at"}},{"cell_type":"markdown","source":["Сами того не осознавая, мы сталкивались с ними повсеместно, например, при работе со списком в цикле"],"metadata":{"id":"OoiutoUBpXTd"}},{"cell_type":"code","source":["test_list = ['Hello', 'world!']"],"metadata":{"id":"Hev_uFbL35dC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_list_iterator = test_list.__iter__()\n","print(test_list_iterator)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"__Syg29J4avI","executionInfo":{"status":"ok","timestamp":1663102727596,"user_tz":-180,"elapsed":2,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f9d2b0bf-50fc-4639-90eb-07f93406c932"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<list_iterator object at 0x7fd47d90eed0>\n"]}]},{"cell_type":"code","source":["test_list_iterator.__next__()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"aLMrpV364OeN","executionInfo":{"status":"ok","timestamp":1663102731779,"user_tz":-180,"elapsed":422,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"07cdca8f-247c-4d67-f46b-7799e4aed86d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Hello'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["test_list_iterator.__next__()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"Pkhe6CVG4mux","executionInfo":{"status":"ok","timestamp":1663102731781,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8e4689c6-5876-4a09-f544-3d71f5dcd6cb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'world!'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["test_list_iterator.__next__()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"vHS_wpLk4npt","executionInfo":{"status":"error","timestamp":1663102732224,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"18da79cd-15af-421e-9db1-58f9836e3916"},"execution_count":null,"outputs":[{"output_type":"error","ename":"StopIteration","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-71-766f2a1f3052>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_list_iterator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mStopIteration\u001b[0m: "]}]},{"cell_type":"markdown","source":["Итоговая картина взаимосвязей этих сущностей указана на картинке:\n","\n","![iters_schema](https://baikov.dev/iterators-and-generators-python/img/iterator-generator.png)"],"metadata":{"id":"Da1NTYSZwJvU"}},{"cell_type":"markdown","source":["`from collections.abc import Iterable, Iterator`"],"metadata":{"id":"2u0gaVt_5bEJ"}},{"cell_type":"code","metadata":{"id":"Y7wV9EPhHlhN"},"source":["from collections.abc import Iterable, Iterator\n","\n","list_example = ['Alice', 'Bob', 'Charlie']\n","iterator1 = iter(list_example)  # iterable.__iter__()\n","iterator2 = iter(list_example)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(list_example)  # ['Alice', 'Bob', 'Charlie']\n","print(isinstance(list_example, Iterable)) # True"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-RJtJFud5x6m","executionInfo":{"status":"ok","timestamp":1663006401833,"user_tz":-180,"elapsed":344,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b6f9cc78-71c2-45b3-f94d-1aa71502d58a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Alice', 'Bob', 'Charlie']\n","True\n","<list_iterator object at 0x7ff2a0ca5550>\n","True\n"]}]},{"cell_type":"code","source":["print(iterator1)\n","print(isinstance(iterator1, Iterator)) # True"],"metadata":{"id":"P4vy--AnBYxB"},"execution_count":null,"outputs":[]}],"metadata":{"celltoolbar":"Слайд-шоу","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"colab":{"provenance":[{"file_id":"10dr22JnRIvQw7gnZOVltu5GngPW0CF7B","timestamp":1707641256398},{"file_id":"1xsQWzjNntSh7eYgQGh5JUHEQ0tJysr15","timestamp":1674979428406}]}},"nbformat":4,"nbformat_minor":0}