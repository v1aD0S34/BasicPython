{"cells":[{"cell_type":"markdown","metadata":{"id":"Ze6woCVI8tv2"},"source":["# Декораторы"]},{"cell_type":"markdown","source":["Декораторы можно применять не только к обычным функциям, но и к декораторам. Помимо декораторов, созданных пользователями, в Python имеется несколько встроенных декораторов."],"metadata":{"id":"bB3gt5G2P5gd"}},{"cell_type":"markdown","source":["## `@staticmethod`"],"metadata":{"id":"fDBgt0p7R4n9"}},{"cell_type":"markdown","source":["Рассмотрим пример - создаем класс `Calendar`, который хранит в себе словарь `\"событие\": дата`:"],"metadata":{"id":"y9cN2J3lSY2U"}},{"cell_type":"code","source":["class Calendar:\n","    def __init__(self):\n","        self.events = dict()\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date"],"metadata":{"id":"mUTvzB3QSdxH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Еще для календаря было бы полезно проверять является ли та или иная дата выходным днем, т.е. иметь метод, который принимает на вход дату и возвращает `True`, если дата выпадает на сб или вс:"],"metadata":{"id":"VA2VOqVHTugc"}},{"cell_type":"code","source":["class Calendar:\n","    def __init__(self):\n","        self.events = {}\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date\n","\n","    def is_weekend(self, date):\n","        return date.weekday() > 4  # Пн Вт Ср Чт Пт Сб Вс"],"metadata":{"id":"SBwW5UsAUFpt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import datetime\n","\n","today = datetime.date.today()\n","temp_cal = Calendar()\n","Calendar.is_weekend(temp_cal, today)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j9RseOpikgce","executionInfo":{"status":"ok","timestamp":1666609150188,"user_tz":-180,"elapsed":23,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c758118f-9cc5-4779-978a-9635dea5236f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["Заметим, что в методе `is_weekend` никак не используется переданный через self экземпляр класса. Это связано с тем, что является ли тот или иной день выходным не зависит от конкретного календаря.\n","\n","Было бы еще приятно, если бы была возможность вызывать метод is_weekend от имени класса, а не экземпляра класса. Эту возможность нам предоставляет декоратор `@staticmethod`:"],"metadata":{"id":"HMzry9q5UWUx"}},{"cell_type":"code","source":["class Calendar:\n","    def __init__(self):\n","        self.events = {}\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date\n","\n","    @staticmethod\n","    def is_weekend(date):  # Теперь не указываем self - он не нужен\n","        return date.weekday() > 4  # Пн Вт Ср Чт Пт Сб Вс"],"metadata":{"id":"JBf-3fbCVUpX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import datetime\n","\n","cal = Calendar()\n","today = datetime.date.today()\n","cal.add_event(\"webinar\", today)"],"metadata":{"id":"HtIyat-wVke0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cal.is_weekend(today)"],"metadata":{"id":"jt58HZ92VyLR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666609210595,"user_tz":-180,"elapsed":17,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5e64dbd8-a578-4b3e-9e2c-2692e19bf2b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["Calendar.is_weekend(today)"],"metadata":{"id":"dqbK_EeNV1gJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666609212745,"user_tz":-180,"elapsed":12,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"de53e885-38cc-42c0-af3a-91dd54b4a60a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["Здесь мы используем модуль datetime, она достаточно простая, поэтому оставляю [ссылку](https://pythonru.com/primery/kak-ispolzovat-modul-datetime-v-python)."],"metadata":{"id":"Uc8e1ZFYUiTR"}},{"cell_type":"code","source":["today.year"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Iuog8DX3lMHq","executionInfo":{"status":"ok","timestamp":1664208928859,"user_tz":-180,"elapsed":226,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"54e8360f-da9e-442a-e33f-a25cea593722"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2022"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["**Вопрос:** почему бы просто не вынести статический метод вне класса как функцию?"],"metadata":{"id":"I3Kwx5uvdLE0"}},{"cell_type":"code","source":["def is_weekend(date):\n","    return date.weekday() > 4  # Пн Вт Ср Чт Пт Сб Вс\n","\n","\n","class Calendar:\n","    def __init__(self):\n","        self.events = {}\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date"],"metadata":{"id":"cUudoZxildjX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["В некоторых случаях так и следует делать - если этот метод пригодится и другим классам. Но если этот метод используется только для данного класса, то лучше его объявить как статический метод."],"metadata":{"id":"GdymCz8tdQSF"}},{"cell_type":"markdown","source":["## `@classmethod`"],"metadata":{"id":"Nd_KNLXjWED8"}},{"cell_type":"markdown","source":["Предположим, что хотим прочитать сохраненный календарь из файла и записать его в переменную. Создадим для этого метод `from_json`. Нам точно не нужен существующий экземпляр класса, чтобы создать новый, поэтому попробуем объявить этот метод как статический:"],"metadata":{"id":"E6GLN7E1bLDv"}},{"cell_type":"code","source":["class Calendar:\n","    def __init__(self):\n","        self.events = {}\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date\n","\n","    @staticmethod\n","    def is_weekend(date):\n","        return date.weekday() > 4\n","\n","    @staticmethod\n","    def from_json(filename):\n","        cal = Calendar()\n","        # Считываем данные из файла и помещаем в cal\n","        return cal"],"metadata":{"id":"fii1_mTBbb1m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cal = Calendar.from_json(\"my_cal.json\")\n","type(cal)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DgdgMd2knFvq","executionInfo":{"status":"ok","timestamp":1666609378424,"user_tz":-180,"elapsed":495,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d2ce3d58-1c3e-4fb7-83fd-cb9e7ae1a8d1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["__main__.Calendar"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["Вроде все работает как надо. Но рассмотрим ситуацию - мы создаем дочерний класс WorkCalendar и создаем его экземпляр с помощью родительского метода `from_json`:"],"metadata":{"id":"JLBWTcEyb7Gw"}},{"cell_type":"code","source":["class WorkCalendar(Calendar):\n","    pass"],"metadata":{"id":"P2AbBLx2cHWc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["workcal = WorkCalendar.from_json(\"my_calendat.cal\")\n","type(workcal)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bK8VqgNcLnC","executionInfo":{"status":"ok","timestamp":1666609421769,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d8d27a0a-c930-48fb-d68b-559ce6c089ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["__main__.Calendar"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["class Calendar:\n","    def __init__(self):\n","        self.events = {}\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date\n","\n","    @staticmethod\n","    def is_weekend(date):\n","        return date.weekday() > 4\n","\n","    def from_json(self, filename):\n","        cal = self.__class__()\n","        #cal = Calendar()\n","        # Считываем данные из файла и помещаем в cal\n","        return cal"],"metadata":{"id":"x1vG8cAOnrGW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class WorkCalendar(Calendar):\n","    pass"],"metadata":{"id":"Y_tpuIGUn1Zw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["workcal = WorkCalendar.from_json(WorkCalendar(),\"my_calendar.cal\")\n","type(workcal)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oLiARWbCn3PX","executionInfo":{"status":"ok","timestamp":1666609467007,"user_tz":-180,"elapsed":1447,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c3a3bb0e-2b52-4008-b3db-5d2a17bb0532"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["__main__.WorkCalendar"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["В результате получили экземпляр класса `Calendar`, а не `WorkCalendar`. В таких ситуациях нам пригодится декоратор `@classmethod`:"],"metadata":{"id":"J7RmNfrUbiPL"}},{"cell_type":"code","source":["class Calendar:\n","    def __init__(self):\n","        self.events = {}\n","\n","    def add_event(self, event, date):\n","        self.events[event] = date\n","\n","    @staticmethod\n","    def is_weekend(date):\n","        return date.weekday() > 4\n","\n","    @classmethod\n","    def from_json(cls, filename):\n","        cal = cls()\n","        # Считываем данные из файла и помещаем в cal\n","        return cal"],"metadata":{"id":"SoRe_blpcq77"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class WorkCalendar(Calendar):\n","    pass"],"metadata":{"id":"YjQPbBuycugS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["workcal = WorkCalendar.from_json(\"my_calendar.cal\")\n","type(workcal)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-vHg-NfRcvQ3","executionInfo":{"status":"ok","timestamp":1666609567841,"user_tz":-180,"elapsed":401,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"19e17ec0-e178-466e-dd18-5ab69df97a0e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["__main__.WorkCalendar"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"wjlEU0uXNXJn"},"source":["# Специальные методы классов"]},{"cell_type":"markdown","source":["Специальные методы классов (aka магические методы, dundered-методы). С одним из них мы уже знакомились - метод `__init__` - конструктор экземпляра.\n","\n","Сегодня познакомимся и с остальными magic-методами."],"metadata":{"id":"XXHcy6opGiEV"}},{"cell_type":"markdown","source":["## `__str__`"],"metadata":{"id":"fIqzVhMDHJ7Q"}},{"cell_type":"markdown","metadata":{"id":"xSEn2GQnNXJo"},"source":["Создадим простой класс: вектор с двумя координатами и цветом.\n","\n","![vector](https://lh4.googleusercontent.com/rF9T2gg0ykY-kmJAcWsAmEkfKIsdSwx79F8cpAJrZmlJlE_Q8sCHRc0ENSPkyJyfkPx-W_2BD1lWpFE6fw_bEgfvRTUUHVs-_47sjFa23s-4EzaMZSE_Q2CwWXB5xSSy1Bg2cRTY)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c_t_1fAhNXJp"},"outputs":[],"source":["import random\n","\n","class Vector:\n","    def __init__(self, x=0, y=0, color=None):\n","        print(\"initializing a vector\")\n","        if type(x) is not int or type(y) is not int:\n","            raise AttributeError('x and y should be int')\n","\n","        self._x = x\n","        self._y = y\n","        self._color = color\n","\n","    def get_x(self):\n","        return self._x\n","\n","    def get_y(self):\n","        return self._y"]},{"cell_type":"markdown","metadata":{"id":"ERWMZNo4NXJr"},"source":["Создадим экземпляр вектора и посмотрим на его строчное представление:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IMXNq0ptNXJs","outputId":"80057f9c-a164-4b3b-864b-5123df4d7860","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1666609986507,"user_tz":-180,"elapsed":25,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["'<__main__.Vector object at 0x7f5c1dea9650>'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":21}],"source":["vector = Vector(1, 2, 'red')\n","str(vector)"]},{"cell_type":"code","source":["print(vector)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_vceyhZNd2wR","executionInfo":{"status":"ok","timestamp":1666609990600,"user_tz":-180,"elapsed":671,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e85f97e9-aeea-45e8-d69a-13336d4f3a09"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<__main__.Vector object at 0x7f5c1dea9650>\n"]}]},{"cell_type":"markdown","metadata":{"id":"93lMS6sfNXJt"},"source":["Информативно, но не очень красиво. Можем переопределить поведение метода приведения нашего класса к строковому типу - `__str__`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kByfBNtkNXJu"},"outputs":[],"source":["class VectorWithStr(Vector):\n","    def __str__(self):\n","        #return 'vector ({}, {}) of color {}'.format(self._x, self._y, self._color)\n","        return f\"vector ({self._x}, {self._y}) of color {self._color}\"\n","        #return \"vector (\"+str(self._x)+\", \"+str(self._y)+\") of color \"+str(self._color)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zvsYD1UANXJv","outputId":"83d6e348-ce87-4043-a1d4-b874c49f2f20","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1666610042522,"user_tz":-180,"elapsed":746,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["'vector (1, 2) of color red'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":24}],"source":["vector = VectorWithStr(1, 2, 'red')\n","str(vector)"]},{"cell_type":"markdown","metadata":{"id":"IfLpQRUnNXJv"},"source":["Просто преобразование в строку? Конечно, нет. Неявные преобразования иногда происходят там, где мы их не ожидаем, например, при вызове `print`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vrLxY3rTNXJw","outputId":"56580f8b-436c-44f0-8a90-da335a6df7a3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610053775,"user_tz":-180,"elapsed":496,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["vector (1, 2) of color red\n"]}],"source":["print(vector)"]},{"cell_type":"markdown","source":["## `__repr__`"],"metadata":{"id":"gQJGl0LgHU41"}},{"cell_type":"markdown","metadata":{"id":"LovgxQvCNXJx"},"source":["Посмотрим как объект будет выглядеть в качестве ключа для словаря:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1vmqlKX0NXJy","outputId":"62616bef-681d-47f9-b44c-e0fede50eaa6","colab":{"base_uri":"https://localhost:8080/","height":184},"executionInfo":{"status":"error","timestamp":1666610080408,"user_tz":-180,"elapsed":438,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-d9796f90bfcf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmydict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmydict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvector\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyError\u001b[0m: <__main__.VectorWithStr object at 0x7f5c1de2add0>"]}],"source":["mydict = {}\n","mydict[vector]"]},{"cell_type":"markdown","metadata":{"id":"V7NCdahLNXJ0"},"source":["Аналогично и при выводе списка, содержащего наш объект:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XxyKaQToNXJ1","outputId":"5e2ff9f4-6af0-41f7-be8c-2c0c278f923d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610203552,"user_tz":-180,"elapsed":489,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[<__main__.VectorWithStr object at 0x7f5c1de2add0>]\n"]}],"source":["mylist = [vector]\n","print(mylist)"]},{"cell_type":"markdown","metadata":{"id":"ReYSwiAINXJ2"},"source":["Почему опять \"некрасивые\" строки?! В Python используется два способа приведения к строке. Это функции `str` и `repr`, которые отличаются своим назначением.\n","\n","- `str` используется там, где нужна человекочитаемость\n","- `repr` реализуется так, чтобы можно было однозначно определить, о каком объекте идет речь, вызывается явно\n","\n","Если `repr` не реализован, используется стандартный вариант, а если не реализован `str`, то вместо него используется `repr`."]},{"cell_type":"markdown","metadata":{"id":"5tGrIR7zNXJ4"},"source":["Добавим `repr`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_8tlXp6-NXJ4"},"outputs":[],"source":["class VectorWithRepr(Vector):\n","    def __repr__(self):\n","        return 'vector representation (x: {}, y: {}, color: {})'.format(self._x, self._y, self._color)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DNSiMoCLNXJ5","outputId":"e40ab88b-b3c2-4d50-88c7-10759accfbb1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610205615,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 1, y: 2, color: red)"]},"metadata":{},"execution_count":30}],"source":["vector = VectorWithRepr(1, 2, 'red')\n","vector"]},{"cell_type":"code","source":["mylist = [vector]\n","mylist"],"metadata":{"id":"8N0ltKCkHdkP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610213106,"user_tz":-180,"elapsed":420,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4110d36c-3ea0-4cf8-f716-fff21b714c9f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[vector representation (x: 1, y: 2, color: red)]"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["mydict = {}\n","mydict[vector]"],"metadata":{"id":"jA7s5cRQHfbI","colab":{"base_uri":"https://localhost:8080/","height":184},"executionInfo":{"status":"error","timestamp":1666610215230,"user_tz":-180,"elapsed":11,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"3f94cc5a-d32d-440d-d969-47a62d558996"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-d9796f90bfcf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmydict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmydict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvector\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyError\u001b[0m: vector representation (x: 1, y: 2, color: red)"]}]},{"cell_type":"markdown","metadata":{"id":"DRrqwhH9NXJ6"},"source":["Создадим класс с обоими реализованными методами:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tMVEa0H_NXJ6"},"outputs":[],"source":["class VectorWithBothReprAndStr(VectorWithRepr, VectorWithStr):\n","    pass"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BLHdyjlGNXJ7","outputId":"589a70a4-317d-4770-fc79-aac338dc0697","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610242305,"user_tz":-180,"elapsed":537,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n","vector (1, 2) of color red\n","[vector representation (x: 1, y: 2, color: red)]\n","<class '__main__.VectorWithBothReprAndStr'> 1\n"]}],"source":["vector = VectorWithBothReprAndStr(1, 2, 'red')\n","list_with_vector = [vector]\n","# вот здесь должны получиться разные значения\n","print(vector)\n","print(list_with_vector)\n","print(type(list_with_vector[0]), list_with_vector[0]._x)"]},{"cell_type":"markdown","metadata":{"id":"QpdkChY9NXJ7"},"source":["## Арифметические методы"]},{"cell_type":"markdown","metadata":{"id":"J7FOGh62NXJ8"},"source":["В Python имеются magic-методы для поддержки арифметических операций с пользовательскими классами:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RJvWdzAsNXJ8"},"outputs":[],"source":["import math\n","import random\n","\n","class VectorWithMath(VectorWithBothReprAndStr):\n","    def __abs__(self):\n","        return math.hypot(self._x, self._y)\n","\n","    def __add__(self, other):\n","        return VectorWithMath(\n","            self.get_x() + other.get_x(),\n","            self.get_y() + other.get_y(),\n","            random.choice((str(self._color), str(other._color)))\n","        )\n","\n","    def __sub__(self, other):\n","        return VectorWithMath(\n","            self.get_x() - other.get_x(),\n","            self.get_y() - other.get_y(),\n","            random.choice((str(self._color), str(other._color)))\n","        )\n","\n","    # ещё есть div, mul и многое другое"]},{"cell_type":"markdown","metadata":{"id":"hVpBFC58NXJ8"},"source":["Создадим два объекта и попробуем операции с ними:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6jZMknyUNXJ9","outputId":"8dd96f69-57a2-4a46-b848-90abfafbae9a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610397327,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n","initializing a vector\n","initializing a vector\n","vector (3, 4) of color blue vector (1, 2) of color red vector (1, 0) of color green\n"]}],"source":["vector1 = VectorWithMath(3, 4, 'blue')\n","vector2 = VectorWithMath(1, 2, 'red')\n","vector3 = VectorWithMath(1, 0, 'green')\n","print(vector1, vector2, vector3)"]},{"cell_type":"code","source":["abs(vector1)"],"metadata":{"id":"JRvWam2eH80x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610400098,"user_tz":-180,"elapsed":18,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8d4e7aba-e7f2-4e54-ed98-8d9da9b2825a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.0"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["vector1 + vector2"],"metadata":{"id":"KOrG7jjnH-o6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610418829,"user_tz":-180,"elapsed":419,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"cca2711d-6aa3-4d00-9d7f-2a7298186528"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 4, y: 6, color: red)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["vector1 - vector2"],"metadata":{"id":"jxd_4iINIAAD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610424261,"user_tz":-180,"elapsed":368,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9f529fb4-7120-4adc-cdd2-a50b89a8a5eb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 2, y: 2, color: red)"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["vector1 + (vector2 + vector3)"],"metadata":{"id":"DAFWsGwnICNL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610426410,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"6a6cd88b-deba-44a5-a154-394907b23122"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n","initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 5, y: 6, color: blue)"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["vector1.__add__(vector2.__add__(vector3))"],"metadata":{"id":"_6G6gIriIECe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610440138,"user_tz":-180,"elapsed":413,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"538d0d30-a775-471a-9e87-0748744e9dd6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n","initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 5, y: 6, color: blue)"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["vector1 += vector2\n","vector1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vm-KRfXehHfS","executionInfo":{"status":"ok","timestamp":1666610445481,"user_tz":-180,"elapsed":536,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"74045a19-6f1b-46ff-cd98-f8f2c3db9b81"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 4, y: 6, color: red)"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["vector1 + 3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":289},"id":"fl7TeMZMjMvr","executionInfo":{"status":"error","timestamp":1666610458181,"user_tz":-180,"elapsed":760,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"3ce69169-1536-4505-a99b-f01eaf8199bc"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-9c406a7afc81>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvector1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-35-80ee7d0106bc>\u001b[0m in \u001b[0;36m__add__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__add__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         return VectorWithMath(\n\u001b[0;32m---> 10\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_x\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_x\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_color\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_color\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'get_x'"]}]},{"cell_type":"markdown","metadata":{"id":"dLCrlj3NNXJ9"},"source":["## Приведение типов"]},{"cell_type":"markdown","metadata":{"id":"dpqRtX5qNXJ-"},"source":["Для преобразования объекта в базовые типы данных имеются соответсвующие magic-методы: `str`, `int`, `float`, `bool`. Добавим преобразование к базовым типам для нашего класса:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JHdY4VaWNXJ-"},"outputs":[],"source":["import math\n","\n","class VectorWithTypes(VectorWithMath):\n","    def __bool__(self):  # неявно вызывается при использовании объекта в условиях\n","        return bool(self._x) or bool(self._y)  # True если вектор ненулевой\n","\n","    def __float__(self):\n","        return abs(self)  # можем пользоваться built-in функциями, которые будут вызывать методы\n","        #return self.__abs__()\n","\n","    def __int__(self):\n","        return int(float(self))"]},{"cell_type":"markdown","metadata":{"id":"5ltEULRONXJ-"},"source":["Проверим работу приведения к типам:"]},{"cell_type":"code","source":["vector = VectorWithTypes(3, 4, 'blue')\n","vector"],"metadata":{"id":"fEQ7h_-jIVMP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610608106,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"dec35ff1-3e80-4eeb-8aed-da3bd26c3e15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 3, y: 4, color: blue)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["int(vector)"],"metadata":{"id":"B-s_CYgzIWPz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610611089,"user_tz":-180,"elapsed":763,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"74432a6b-39ba-411a-9751-b415bd76de6c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["float(vector)"],"metadata":{"id":"FlbEzn58IXHd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610612054,"user_tz":-180,"elapsed":16,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"06188f5a-9eca-49eb-d2bb-7fb80b69675b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.0"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZeSwKkLhNXJ_","outputId":"fc4ef5ac-629b-4609-fe1d-39e106602dcc","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1666610614205,"user_tz":-180,"elapsed":12,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'vector ~ True'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":50}],"source":["\"vector ~ True\" if vector else \"vector ~ False\""]},{"cell_type":"code","source":["vector = VectorWithTypes()\n","vector"],"metadata":{"id":"rB9wYi1EIdYZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610641454,"user_tz":-180,"elapsed":415,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f267148a-182a-42b7-87cf-c9d3b6efa5c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 0, y: 0, color: None)"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fWr-eHGqNXJ_","outputId":"2a4f55d0-f110-4555-f24b-8542035d6a24","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1666610644703,"user_tz":-180,"elapsed":24,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'vector ~ False'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":52}],"source":["\"vector ~ True\" if vector else \"vector ~ False\""]},{"cell_type":"markdown","metadata":{"id":"mHkybzSeNXKA"},"source":["## Итерирование"]},{"cell_type":"markdown","metadata":{"id":"pRNpaPHXNXKA"},"source":["Есть два способа сделать объект \"итерабельным\", т.е. по объекту можно было итерироваться (например, `for .. in ..`):\n","- методы `__next__` и `__iter__`\n","- метод `__getitem__` - доступ по индексу\n","\n","Также есть методы `len` и `reversed` для работы соответствующих встроенных функций."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a075vPNhNXKB"},"outputs":[],"source":["class VectorIterable(VectorWithTypes):\n","    def __getitem__(self, position):\n","        #if position == 0:\n","        #    return self._x\n","        #elif position == 1:\n","        #    return self._y\n","        #else:\n","        #    raise IndexError\n","        return (self._x, self._y)[position]\n","\n","    def __len__(self):\n","        # return 2\n","        return len((self._x, self._y))  # 2\n","\n","    def __reversed__(self):\n","        return (self._x, self._y)[::-1]"]},{"cell_type":"markdown","metadata":{"id":"EtwnKpJpNXKB"},"source":["Посмотрим как оно работает:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1WdIM9QeNXKB","outputId":"42980f76-6f58-47ee-acd2-4d592a3a8e2c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610770571,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]},{"output_type":"execute_result","data":{"text/plain":["vector representation (x: 100, y: 500, color: None)"]},"metadata":{},"execution_count":55}],"source":["vector = VectorIterable(100, 500)\n","vector"]},{"cell_type":"code","source":["vector[0], vector[1]"],"metadata":{"id":"pRAfaswtIznS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610776560,"user_tz":-180,"elapsed":364,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"616927d4-4487-4633-da1a-3bc4a4b72933"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100, 500)"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["vector[:1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AG9IglFu3N5G","executionInfo":{"status":"ok","timestamp":1666610795771,"user_tz":-180,"elapsed":418,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c4d5e4da-5916-4dfd-bc03-cfaf0964a5d1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100,)"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["reversed(vector)"],"metadata":{"id":"AmLY-UvOI2FY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610801506,"user_tz":-180,"elapsed":434,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c562d524-5a03-47fe-d82f-2659b3686f56"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(500, 100)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["len(vector)"],"metadata":{"id":"bCnPOvehI4cm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610806532,"user_tz":-180,"elapsed":734,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c92c7632-2dd6-4ba7-d3c4-30dc2244780a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":59}]},{"cell_type":"markdown","metadata":{"id":"QgpqCMMhNXKD"},"source":["Теперь можем использовать объект в цикле `for` - он будет вызывать индексы от 0 до тех пор, пока не вылезет ошибка:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1ShoE7x3NXKE","outputId":"bed3dda6-644e-4043-8606-defa9aaf6655","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610828313,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["100\n","500\n"]}],"source":["for coordinate in vector:\n","    print(coordinate)"]},{"cell_type":"markdown","metadata":{"id":"Va68a2KJNXKF"},"source":["**Замечание** - цикл `for` вызывает `__getitem__` ТОЛЬКО если у класса отсутствует `__iter__`.\n","\n","Проверим это, сделав наш объект iterable:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L4USxvS_NXKG"},"outputs":[],"source":["class VectorIterable1(VectorWithTypes):\n","    def __getitem__(self, position):\n","        return (self._y, self._x)[position]  # поменяем координаты, чтобы отличить два варианта\n","\n","    def __iter__(self):\n","        return iter((self._x, self._y))\n","\n","    def __len__(self):\n","        return 2\n","\n","    def __reversed__(self):\n","        return (self._x, self._y)[::-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e9farwckNXKH","outputId":"c2d57456-cbed-46ad-ea07-2a6bd545edcb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666610909362,"user_tz":-180,"elapsed":352,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n","3\n","5\n"]}],"source":["vect = VectorIterable1(3, 5)\n","\n","for c in vect:\n","    print(c)"]},{"cell_type":"code","source":["example_set = set()\n","example_set.add(10)\n","example_set.add(15)\n","\n","for item in example_set:\n","    print(item)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-3BRMAdW4gwg","executionInfo":{"status":"ok","timestamp":1666610974605,"user_tz":-180,"elapsed":338,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4cd3be15-1afc-46bb-b8d8-15163c8441ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","15\n"]}]},{"cell_type":"code","source":["example_set[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"Kxl3Vg4O4rjX","executionInfo":{"status":"error","timestamp":1666610974989,"user_tz":-180,"elapsed":10,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"152817bf-148c-45f9-bbe7-d53e483735f4"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-ef8c89818ed8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mexample_set\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'set' object is not subscriptable"]}]},{"cell_type":"markdown","metadata":{"id":"FeXVggLiNXKH"},"source":["Значит вызывается `__iter__`!"]},{"cell_type":"code","source":["class NewVector1:\n","    def __init__(self, *args, color=None):\n","        self.coords = args\n","\n","    def __len__(self):\n","        return len(self.coords)\n","\n","class NewVector2:\n","    def __init__(self, color=None, **kwargs):\n","        self.coords = kwargs\n","\n","    def __len__(self):\n","        return len(self.coords.keys())"],"metadata":{"id":"xFq1aqLTqo7F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test = NewVector1(1,2,3,4,5,6, color='violet')\n","len(test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DY-8cXhCq2Pd","executionInfo":{"status":"ok","timestamp":1666611010107,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"08ef2285-a395-4541-be99-12d52c0227d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["test = NewVector2(x1=1,x2=2,x3=3,x4=4, color='violet')\n","len(test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"12lDKqBxrY_m","executionInfo":{"status":"ok","timestamp":1666611010439,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"36384434-f868-41ac-8d05-08f70ff7e5dc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":67}]},{"cell_type":"markdown","metadata":{"id":"6fHzi651NXKI"},"source":["## Динамическая работа с атрибутами"]},{"cell_type":"markdown","metadata":{"id":"gKS_SAKbNXKI"},"source":["В Python существуют 4 magic-метода, которые переопределяют работу с атрибутами:\n","- `__getattr__` - вызывается при запросе несуществующих атрибутов, аргумент - название атрибута\n","- `__getattribute__` - вызывается при запросе любых атрибутов\n","- `__setattr__` - вызывается при изменении значения атрибута (не только существующего)\n","- `__delattr__` - вызывается при удалении атрибута"]},{"cell_type":"markdown","source":["Насколько вы помните, в Python нет никакой защиты от \"взлома\". Попробуем сделать ее самостоятельно!"],"metadata":{"id":"F-qxgUoEJRQl"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"DK1Mn4C8NXKJ"},"outputs":[],"source":["class VectorWithAllAttributes(VectorIterable):\n","    def __getattr__(self, attr_name):\n","        return \"value of {}\".format(attr_name)\n","\n","    def __setattr__(self, attr_name, attr_value):\n","        if attr_name not in ('_x', '_y', '_color'):\n","            raise Exception('you shall not add new attributes here, young padawan!')  # Запрещаем добавление атрибутов\n","        else:\n","            super().__setattr__(attr_name, attr_value)\n","            #self.__setattr__(attr_name, attr_value)\n","\n","    def __delattr__(self, attr_name):\n","        print('Heh, you can delete nothing')"]},{"cell_type":"markdown","metadata":{"id":"t-hWk0xDNXKJ"},"source":["**Замечание** - важно вызывать `__setattr__` для предка, а не для самого объекта, чтобы не свалиться в рекурсию; если ни от кого не наследовались, можем вызвать `object.__setattr__(self, attr_name, attr_value)`"]},{"cell_type":"markdown","metadata":{"id":"TKREJ5ndNXKK"},"source":["Создадим объект и посмотрим как он ведет себя:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QQzbuseHNXKL","outputId":"d54d262a-c042-4ae7-858f-2ab437b21caf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611209718,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["initializing a vector\n"]}],"source":["vector = VectorWithAllAttributes(1, 2, 'violet')"]},{"cell_type":"code","source":["vector.some_attribute"],"metadata":{"id":"XJ0QTr3IJmO4","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1666611213359,"user_tz":-180,"elapsed":12,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"10e1679e-56c5-46e7-ef67-215a1f2e732d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'value of some_attribute'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["vector._color"],"metadata":{"id":"VvpTAFBxJoeG","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1666611218011,"user_tz":-180,"elapsed":465,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"0a802723-ec55-404a-c339-3dfdc22595bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'violet'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["vector.get_x()"],"metadata":{"id":"V00omRVeJo0z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611226572,"user_tz":-180,"elapsed":411,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"7feb2296-0f62-40b8-ec33-508114b229bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["del vector._color"],"metadata":{"id":"sPivnfixJqA3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611230042,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a42ec204-9833-4b3b-da3e-8fd070b9d8c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Heh, you can delete nothing\n"]}]},{"cell_type":"code","source":["vector._color"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"cJhkEwfy_PSf","executionInfo":{"status":"ok","timestamp":1666611237568,"user_tz":-180,"elapsed":924,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c0e23a85-d2bc-4c83-d8ce-9c71c8680a5b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'violet'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":74}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"12rs5dDnNXKL","outputId":"99b9c468-05c2-4cac-8bbd-9ec93f81f822","colab":{"base_uri":"https://localhost:8080/","height":289},"executionInfo":{"status":"error","timestamp":1666611245607,"user_tz":-180,"elapsed":719,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"error","ename":"Exception","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-75-8f1d7f8427cb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_attribute\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"value\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-68-2599fd85f09d>\u001b[0m in \u001b[0;36m__setattr__\u001b[0;34m(self, attr_name, attr_value)\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mattr_name\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'_y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'_color'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'you shall not add new attributes here, young padawan!'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Запрещаем добавление атрибутов\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattr_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mException\u001b[0m: you shall not add new attributes here, young padawan!"]}],"source":["vector.new_attribute = \"value\""]},{"cell_type":"code","source":["vector._color = 'gray'"],"metadata":{"id":"jwoJKkB__1jK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ffdLXqg_NXKL"},"source":["### `__getattr__` vs. `__getattribute__`"]},{"cell_type":"markdown","metadata":{"id":"BiShIz5FNXKM"},"source":["Еще один шанс свалиться в бесконечную рекурсию - `__getattribute__`. Поэтому так же нужна устройчивая конструкция:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tB9bamoJNXKM"},"outputs":[],"source":["class GetAttr:\n","    attr1 = 1\n","\n","    def __init__(self):\n","        self.attr2 = 2\n","\n","    def __getattr__(self, attr):   # Только для неопределенных атрибутов\n","        print('get: ' + attr)      # Не attr1: наследуется от класса\n","        return 3                   # Не attr2: хранится в экземпляре\n","\n","\n","class GetAttribute:\n","    attr1 = 1\n","\n","    def __init__(self):\n","        self.attr2 = 2\n","\n","    def __getattribute__(self, attr):  # Вызывается всеми операциями чтения\n","        print('get: ' + attr)          # Для предотвращения зацикливания используется суперкласс\n","        if attr == 'attr3':\n","            return 3\n","        else:\n","            return super().__getattribute__(attr)"]},{"cell_type":"markdown","metadata":{"id":"rm-VjoKvNXKM"},"source":["Посмотрим на их поведение:"]},{"cell_type":"code","source":["X = GetAttr()"],"metadata":{"id":"H9j0nRpXKhUS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X.attr1"],"metadata":{"id":"yfGLNJ_gKhJG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611467421,"user_tz":-180,"elapsed":13,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b119ae45-9afc-4cc0-eebb-d787f9b9538a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["X.attr2"],"metadata":{"id":"n1C6cEgsKijm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611469059,"user_tz":-180,"elapsed":13,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1a1ffa16-93a0-4daf-aa17-fb8203efde2a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["X.attr3"],"metadata":{"id":"v1vnUM1rKjlo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611472133,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"746fe39e-fdbe-49cc-bc12-a26401e20172"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr3\n"]},{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["X.attr4"],"metadata":{"id":"VSsH0T0YKkro","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611486048,"user_tz":-180,"elapsed":425,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8942f7a0-1809-48d1-ea77-891e5bcf6d36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr4\n"]},{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","source":["А теперь `GetAttribute()`:"],"metadata":{"id":"wr7zoRDHKtJf"}},{"cell_type":"code","source":["X = GetAttribute()"],"metadata":{"id":"wi-5nextKlvP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X.attr1"],"metadata":{"id":"ouWQ7iBNKn-D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611507896,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"124963bd-eb31-4c59-fc17-57eaf749d71f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr1\n"]},{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["X.attr2"],"metadata":{"id":"xaL5myC3Ko_s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611520932,"user_tz":-180,"elapsed":582,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"76d34bac-c932-4e59-feee-f27e983f5807"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr2\n"]},{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["X.attr3"],"metadata":{"id":"LUhUlmY-KqGI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666611524112,"user_tz":-180,"elapsed":19,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c1875e3c-d356-4074-9f9e-3c1111fc5d1d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr3\n"]},{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["X.attr4"],"metadata":{"id":"o6M8HCv2Kq_o","colab":{"base_uri":"https://localhost:8080/","height":271},"executionInfo":{"status":"error","timestamp":1666611527421,"user_tz":-180,"elapsed":13,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c949cc62-17c4-437d-d524-8b9380204cf8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr4\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-88-4e07063c16e3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mattr4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-78-5d9d8678f95e>\u001b[0m in \u001b[0;36m__getattribute__\u001b[0;34m(self, attr)\u001b[0m\n\u001b[1;32m     21\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'GetAttribute' object has no attribute 'attr4'"]}]},{"cell_type":"markdown","source":["Extra"],"metadata":{"id":"elRMy1EyDD9l"}},{"cell_type":"code","source":["class GetAttr2:\n","    attr1 = 1\n","\n","    def __init__(self):\n","        self.attr2 = 2\n","\n","    def __getattribute__(self, attr):\n","        print('get: ' + attr)\n","        if attr == 'attr3':\n","            return 3\n","        else:\n","            return super().__getattribute__(attr)"],"metadata":{"id":"qdOpSQJmDDde"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["getattr2 = GetAttr2()"],"metadata":{"id":"-IhbBwGoDJIJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["getattr2.attr1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7f_QOJJDDNc1","executionInfo":{"status":"ok","timestamp":1666611619313,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5e4877a9-ebb4-4d9d-bd02-fce42783ebe3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr1\n"]},{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["getattr2.attr2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sL7ZjximDR-q","executionInfo":{"status":"ok","timestamp":1666611621559,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4b39415a-8edf-4cde-85d7-19446555c373"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr2\n"]},{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["getattr2.attr3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NLgoS_sYDZnN","executionInfo":{"status":"ok","timestamp":1666611622075,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"3e64d34c-5748-4e5f-d7e9-555f45147561"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr3\n"]},{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["print(dir(getattr2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wFKJ45TBDhUK","executionInfo":{"status":"ok","timestamp":1666611623706,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"cf02a434-1ec7-4f9e-b7b8-0ebbe7bb41c3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: __dict__\n","get: __class__\n","['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'attr1', 'attr2']\n"]}]},{"cell_type":"code","source":["getattr2.attr4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"9f6GWCqrDmjr","executionInfo":{"status":"error","timestamp":1664216903011,"user_tz":-180,"elapsed":237,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2e9da7cc-eb60-49c2-8080-53d12881fc54"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get: attr4\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-139-72ff7b6f41c4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgetattr2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mattr4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-132-0260d5e1222e>\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attr)\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'GetAttr2' object has no attribute 'attr4'"]}]},{"cell_type":"markdown","metadata":{"id":"NFqJb-Q9NXKN"},"source":["## Контексты"]},{"cell_type":"markdown","metadata":{"id":"FAvky-2dNXKO"},"source":["В Python есть конструкция, называемая менеджер контекста:\n","\n","```python\n","with smth as smth:\n","    <тело>\n","```"]},{"cell_type":"markdown","source":["Она позволяет **гарантированно** выполнять набор команд при начале и при завершении выполнения команд внутри себя."],"metadata":{"id":"cX3iB65OMjLj"}},{"cell_type":"markdown","source":["Частый пример - чтение файла."],"metadata":{"id":"tjYMhvfgMuc7"}},{"cell_type":"markdown","source":["Создадим пустой файл:"],"metadata":{"id":"IYM8GDLlM03I"}},{"cell_type":"code","source":["%%bash\n","touch test.txt"],"metadata":{"id":"5dOok_h5RLOn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Откроем этот файл и запишем туда строку:"],"metadata":{"id":"lbFZAf3-NBzS"}},{"cell_type":"code","source":["f = open(\"test.txt\", \"w\")"],"metadata":{"id":"0ARZ2jwYQ6VB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["type(f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d2fDz7bCGpaQ","executionInfo":{"status":"ok","timestamp":1664218155711,"user_tz":-180,"elapsed":226,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f56ef2ce-6e73-4637-f4fa-974597661a4d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["_io.TextIOWrapper"]},"metadata":{},"execution_count":156}]},{"cell_type":"code","source":["f.write(\"hello, world!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DmMC16rpGtyT","executionInfo":{"status":"ok","timestamp":1664218155920,"user_tz":-180,"elapsed":2,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d0272e43-9ac5-44a3-dd89-9c4972f69f75"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["13"]},"metadata":{},"execution_count":157}]},{"cell_type":"markdown","source":["Посмотрим, что записалось в файл:"],"metadata":{"id":"N44DnHyRNdPg"}},{"cell_type":"code","source":["%%bash\n","cat test.txt"],"metadata":{"id":"0vk7r5yURVDV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Пусто! Такое поведение связано с особенностями работы операционных систем. Поэтому надо закрывать файл после завершения работы с ним!"],"metadata":{"id":"emP3NptuNige"}},{"cell_type":"code","source":["f.close()"],"metadata":{"id":"pcRznIfTRdRt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%bash\n","cat test.txt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AqJ3RYqKRe2x","executionInfo":{"status":"ok","timestamp":1664218161682,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8be82cc5-9da5-4038-e24e-05ed6bb7e929"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hello, world!"]}]},{"cell_type":"markdown","source":["Чтобы случайно не забыть закрыть файл после завершения работы с ним, удобно использовать с функцией `open` оператор `with`:"],"metadata":{"id":"N37qjefNOL62"}},{"cell_type":"code","source":["with open(\"test.txt\", \"a\") as f:\n","    f.write(\"hello, world2!\")"],"metadata":{"id":"wziLh6aXRkiu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%bash\n","cat test.txt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYTQXwj4RvvF","executionInfo":{"status":"ok","timestamp":1664218169817,"user_tz":-180,"elapsed":265,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"79d49420-3555-4e51-9b38-effbb0a6b344"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hello, world!hello, world2!"]}]},{"cell_type":"markdown","source":["Разберем как создавать собстенные менеджеры контекстов:"],"metadata":{"id":"jLBA8ZZBOZIm"}},{"cell_type":"markdown","metadata":{"id":"2NjarFh6NXKO"},"source":["Для работы с контекстами есть два magic-метода:\n","\n","- `__enter__` - выполняется до отработки тела контекста\n","- `__exit__`  - после обработки тела контекста + ловит ошибку"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u5llskOmNXKO"},"outputs":[],"source":["class VectorWithContextManager:\n","    def __enter__(self):\n","        print('entering context')\n","\n","    def __exit__(self, exception_class, exception_obj, tb_obj):\n","        print(exception_class, exception_obj, tb_obj)\n","        print(dir(tb_obj), tb_obj.tb_lineno)\n","        print('leaving context')\n","\n","        return False # -- бросаем ошибку дальше\n","        #return True  # -- НЕ бросаем ошибку дальше"]},{"cell_type":"markdown","source":["Проверим как наш менеджер контекста обработает возникающие ошибки:"],"metadata":{"id":"xU754tLFOpuh"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"kZQysNKQNXKO","outputId":"81dfabb4-440d-46e6-9e45-63783ea3a4a6","colab":{"base_uri":"https://localhost:8080/","height":358},"executionInfo":{"status":"error","timestamp":1666611961569,"user_tz":-180,"elapsed":21,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["entering context\n","0\n","1\n","2\n","<class 'KeyError'> 'something happened inside!' <traceback object at 0x7f5c1d3c0730>\n","['tb_frame', 'tb_lasti', 'tb_lineno', 'tb_next'] 4\n","leaving context\n"]},{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-98-9b40e5ee9f68>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'something happened inside!'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'something happened inside!'"]}],"source":["with VectorWithContextManager() as vec:  # vec = VectorWithContextManager()\n","    for i in range(3):\n","        print(i)\n","    raise KeyError('something happened inside!')\n","\n","    for i in range(3, 5):\n","        print(i)\n","\n","print('we are out of the context')"]},{"cell_type":"code","source":["raise KeyError('something happened inside!')\n","print('A')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":185},"id":"JEw6_op_LVLY","executionInfo":{"status":"error","timestamp":1664219210111,"user_tz":-180,"elapsed":259,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"04d15fa5-92a3-4005-80b5-76bad21b3827"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-186-dddaf72b7f58>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'something happened inside!'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'A'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'something happened inside!'"]}]},{"cell_type":"code","source":["type(vec)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h_Kckm-NMV2O","executionInfo":{"status":"ok","timestamp":1664219211001,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b0e74380-b43c-4f42-bc6d-be54c6f04520"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["NoneType"]},"metadata":{},"execution_count":187}]},{"cell_type":"code","source":["f = open(\"test.txt\", \"a\")"],"metadata":{"id":"s1p_0XaiNIb7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(dir(f))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_06T0pQLNJkF","executionInfo":{"status":"ok","timestamp":1664219437664,"user_tz":-180,"elapsed":234,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2a97f0fb-407c-47eb-da8c-122f6aed401b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['_CHUNK_SIZE', '__class__', '__del__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_checkClosed', '_checkReadable', '_checkSeekable', '_checkWritable', '_finalizing', 'buffer', 'close', 'closed', 'detach', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'line_buffering', 'mode', 'name', 'newlines', 'read', 'readable', 'readline', 'readlines', 'reconfigure', 'seek', 'seekable', 'tell', 'truncate', 'writable', 'write', 'write_through', 'writelines']\n"]}]},{"cell_type":"markdown","metadata":{"id":"C_Oz3nPGNXKP"},"source":["Но создавать менеджеры контекстов можно и еще проще - с помощью декоратора `contextmanager` И генераторной функции:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WwiHMLl9NXKP","outputId":"8de99a35-47bb-4057-d700-28cd5e85dfbc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666612345721,"user_tz":-180,"elapsed":20,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["statement before context\n","handling entering the context\n","initializing a vector\n","<__main__.Vector object at 0x7f5c1d2e1690>\n","<__main__.Vector object at 0x7f5c1d2e1690>\n","<__main__.Vector object at 0x7f5c1d2e1690>\n","handling leaving the context\n","statement after context\n"]}],"source":["from contextlib import contextmanager\n","\n","@contextmanager\n","def vector_mgr():\n","    print('handling entering the context')\n","    yield Vector()\n","    print('handling leaving the context')\n","\n","print('statement before context')\n","with vector_mgr() as vector:\n","    for i in range(3):\n","        print(vector)\n","print('statement after context')"]},{"cell_type":"markdown","metadata":{"id":"iu1lt7_lNXKQ"},"source":["## Создание и удаление объектов"]},{"cell_type":"markdown","metadata":{"id":"jj1VQ8vwNXKR"},"source":["При создании и удалении объектов так же используются magic-методы `__new__` и `__del__`:\n","- `__new__` - вызывается при создании объекта (до конструктора-инициализации)\n","- `__del__` - вызывается при удалении объекта"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bmnehFe_NXKR"},"outputs":[],"source":["class VectorInitialized(Vector):\n","    def __new__(cls, *args, **kwargs):  # метод класса, принимает класс и аргументы конструктора\n","        print('invoking __new__ method')\n","        print(cls, args, kwargs)\n","        return object.__new__(cls)\n","\n","    def __del__(self):\n","        print('deleting an object')\n","        raise Exception(\"exception while destructing\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GdHfjwL1NXKR","outputId":"4f316907-9db2-4a11-df66-ca11e17804f5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666612445402,"user_tz":-180,"elapsed":19,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["invoking __new__ method\n","<class '__main__.VectorInitialized'> (1, 2) {'color': 'navy blue'}\n","initializing a vector\n","<__main__.VectorInitialized object at 0x7f5c1d2aa4d0>\n"]}],"source":["vect = VectorInitialized(1, 2, color='navy blue')\n","print(vect)"]},{"cell_type":"code","source":["vect._x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dc2s1VZb2EuV","executionInfo":{"status":"ok","timestamp":1666612488781,"user_tz":-180,"elapsed":19,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"7d93382e-4395-40aa-cd69-e967dc2d8d1d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9QM02RVMNXKS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666612507257,"user_tz":-180,"elapsed":371,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f555c1d5-59b1-4c18-ce86-0b48a22e320a"},"outputs":[{"output_type":"stream","name":"stdout","text":["deleting an object\n"]},{"output_type":"stream","name":"stderr","text":["Exception ignored in: <function VectorInitialized.__del__ at 0x7f5c1d28b9e0>\n","Traceback (most recent call last):\n","  File \"<ipython-input-102-22db342b9e0d>\", line 9, in __del__\n","Exception: exception while destructing\n"]}],"source":["del vect"]},{"cell_type":"code","source":["vect"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"V951m8jX2Mo5","executionInfo":{"status":"error","timestamp":1666612516736,"user_tz":-180,"elapsed":27,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"3064ee98-4c60-4d94-b762-2830c30ef02e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-106-2c449ab13d72>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvect\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'vect' is not defined"]}]},{"cell_type":"code","source":["tuple(['a','b','c'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GbMkSlKT2_8N","executionInfo":{"status":"ok","timestamp":1666612748244,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"7e1c9804-61c4-4e87-df8b-2b680b939b15"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('a', 'b', 'c')"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["class NewTuple(tuple):\n","    def __new__(cls, a):\n","        return super().__new__(cls, (item.upper() for item in a))\n","\n","    #def __init__(self, args):\n","        #for i in range(len(args)):\n","            #print(self[i])\n","            #self[i] = self[i].upper()"],"metadata":{"id":"ZfPQxfbR3Ruy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["NewTuple(['a','b','c'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VknNBJP-3YHz","executionInfo":{"status":"ok","timestamp":1666613119126,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"83ce8005-16fa-4cfb-bd83-8b8ba8ee301c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('A', 'B', 'C')"]},"metadata":{},"execution_count":125}]},{"cell_type":"markdown","metadata":{"id":"WwUsW1HMNXKS"},"source":["### Задачка"]},{"cell_type":"markdown","metadata":{"id":"UkkACFD_NXKS"},"source":["Как с помощью метода `__new__` сделать класс \"синглтоном\" -- объектом, который создается один раз, а при попытке повторного создания возвращается уже готовый объект?"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"tsOl1J6LNXKS"},"outputs":[],"source":["class SingletonClass:\n","    _instance = None\n","\n","    def __new__(cls, *args, **kwargs):\n","        if cls._instance is None:\n","            cls._instance = object.__new__(cls, *args, **kwargs)\n","        return cls._instance"]},{"cell_type":"code","source":["obj1 = SingletonClass()\n","obj2 = SingletonClass()\n","assert id(obj1) == id(obj2)\n","print(id(obj1) == id(obj2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPggoPeMQcPE","executionInfo":{"status":"ok","timestamp":1666613239548,"user_tz":-180,"elapsed":18,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"520427af-cff3-4fb3-b6fc-97757b0f4789"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"markdown","metadata":{"id":"HzwRYbTb8tv3"},"source":["## Callable-объекты"]},{"cell_type":"markdown","source":["Можно сделать экземпляры класса вызываемыми как функции (чтобы в скобках можно было бы указать аргументы и получить значение)."],"metadata":{"id":"RqXMcQY2fpIa"}},{"cell_type":"code","metadata":{"id":"6Y-SFHOS8tv3"},"source":["class Adder:\n","    def __init__(self, x):\n","        self.x = x\n","\n","    def __call__(self, y):\n","        return self.x + y\n","\n","    def call(self, y):\n","        return self.x + y"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["adder = Adder(10)"],"metadata":{"id":"CXVdVc4vfzro"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(adder(14))\n","print(adder.__call__(14))\n","print(adder.call(14))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kddEiqYuSI4V","executionInfo":{"status":"ok","timestamp":1666613342982,"user_tz":-180,"elapsed":923,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4858c733-74a6-4129-9711-5dfff334c6f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["24\n","24\n","24\n"]}]},{"cell_type":"code","source":["adder.x = sum(i ** 2 for i in range(3))\n","\n","print(adder(0))\n","print(adder(0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5OuB-KLySIAw","executionInfo":{"status":"ok","timestamp":1664220788400,"user_tz":-180,"elapsed":212,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"df73fec7-7488-4b93-8769-e0fa15e4e530"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","5\n"]}]},{"cell_type":"markdown","source":["# Extra"],"metadata":{"id":"wem-EUPBgRZZ"}},{"cell_type":"markdown","metadata":{"id":"FwTXe6qzHlhR"},"source":["## Атрибуты функции"]},{"cell_type":"code","metadata":{"id":"16VCk26lIKPt"},"source":["print?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOm73CoMIBTe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664221037454,"user_tz":-180,"elapsed":273,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"abeb6836-347a-4817-8feb-070a8bd54bb1"},"source":["print(print.__doc__)\n","print(type(print.__doc__))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n","\n","Prints the values to a stream, or to sys.stdout by default.\n","Optional keyword arguments:\n","file:  a file-like object (stream); defaults to the current sys.stdout.\n","sep:   string inserted between values, default a space.\n","end:   string appended after the last value, default a newline.\n","flush: whether to forcibly flush the stream.\n","<class 'str'>\n"]}]},{"cell_type":"code","metadata":{"id":"9Bqy3qN7HlhS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664221069208,"user_tz":-180,"elapsed":209,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e4f01535-6903-429f-ddfc-78e4fa97c526"},"source":["def foo(*args, **kwargs):\n","    'Function which prints arguments.'\n","    print('args =', args, 'kwargs =', kwargs)\n","\n","print(*dir(foo), sep=' ')\n","print(foo.__name__)\n","print(foo.__doc__) # documentation\n","print(foo.__module__)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["__annotations__ __call__ __class__ __closure__ __code__ __defaults__ __delattr__ __dict__ __dir__ __doc__ __eq__ __format__ __ge__ __get__ __getattribute__ __globals__ __gt__ __hash__ __init__ __init_subclass__ __kwdefaults__ __le__ __lt__ __module__ __name__ __ne__ __new__ __qualname__ __reduce__ __reduce_ex__ __repr__ __setattr__ __sizeof__ __str__ __subclasshook__\n","foo\n","Function which prints arguments.\n","__main__\n"]}]},{"cell_type":"markdown","metadata":{"id":"_Gth1Y8WHlhS"},"source":["#### Аттрибуты можно использовать как статические переменные"]},{"cell_type":"code","metadata":{"id":"ZX8levfJHlhS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664221110436,"user_tz":-180,"elapsed":310,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ed7682d3-9096-454b-bd92-fa3b4ac6d8e6"},"source":["def get_next_id():\n","    if not hasattr(get_next_id, 'value'):\n","        get_next_id.value = 0\n","\n","    get_next_id.value += 1\n","    return get_next_id.value\n","\n","print(get_next_id())\n","print(get_next_id())\n","print(get_next_id())\n","print('get_next_id.value =', get_next_id.value)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","get_next_id.value = 3\n"]}]},{"cell_type":"markdown","metadata":{"id":"bpjVucOcHlhT"},"source":["#### Где хранятся аргументы по умолчанию?"]},{"cell_type":"code","metadata":{"id":"A-VzbnrrHlhT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664221169117,"user_tz":-180,"elapsed":216,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b102b2bf-983e-473d-c76a-a66449771802"},"source":["def foo(a = 'Hello', b = 1):\n","    print(a, b)\n","\n","print('Defaults: ', foo.__defaults__)\n","foo()\n","\n","foo.__defaults__ = ('Hello', 'world!')\n","print('Defaults: ', foo.__defaults__)\n","foo()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Defaults:  ('Hello', 1)\n","Hello 1\n","Defaults:  ('Hello', 'world!')\n","Hello world!\n"]}]},{"cell_type":"markdown","metadata":{"id":"xQYjlZeKHlhV"},"source":["#### Почему не стоит использовать mutable аргументы по умолчанию"]},{"cell_type":"code","metadata":{"id":"dLFcKVzeHlhV"},"source":["def foo(a, b=[]):\n","    b.append(a)\n","    print(*b)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["foo('Hello')\n","foo('the')\n","foo('wonderful')\n","foo('world!')\n","foo('world!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wvzo_Ht9UY0-","executionInfo":{"status":"ok","timestamp":1664221345763,"user_tz":-180,"elapsed":2,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d9e8ff6e-0a9a-44d7-db1e-bee6721f241c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello\n","Hello the\n","Hello the wonderful\n","Hello the wonderful world!\n","Hello the wonderful world! world!\n"]}]},{"cell_type":"code","metadata":{"id":"Bf1bhPiKVUYV"},"source":["def foo(a):\n","    b=[]\n","    b.append(a)\n","    print(*b)\n","\n","foo('Hello')\n","foo('the')\n","foo('wonderful')\n","foo('world!')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## @dataclass"],"metadata":{"id":"xJf-YtnAemdQ"}},{"cell_type":"markdown","source":["Часто классы используются как контейнеры для данных. Для таких случаев удобно создавать классы с использованием `@dataclass` (Py >= 3.7) - удобного инструмента для создания классов, содержащих в себе большое количество атрибутов."],"metadata":{"id":"w8Z1xprYy0I9"}},{"cell_type":"markdown","source":["Посмотрим на примере класса `Person`. В обычном питоне он будет выглядеть так:"],"metadata":{"id":"CtC9M9nqz1B_"}},{"cell_type":"code","source":["class Person:\n","    def __init__(self, name, job, age):\n","        self.name = name\n","        self.job = job\n","        self.age = age"],"metadata":{"id":"fHEDmItpz799"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Какие минусы есть у такой реализации?"],"metadata":{"id":"djgvmnXk0TX_"}},{"cell_type":"markdown","source":["1. Не очень информативное представление:"],"metadata":{"id":"P3hxHsE90Wkf"}},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dvpYeDPL0WF-","executionInfo":{"status":"ok","timestamp":1696777521741,"user_tz":-180,"elapsed":16,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"6b589b1d-4ec1-4121-87ed-b5f14d3e6fed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<__main__.Person object at 0x7d08bb790160>\n"]}]},{"cell_type":"markdown","source":["Можем исправить это с помощью `__str__` и `__repr__`."],"metadata":{"id":"a9vJIgO50j3I"}},{"cell_type":"code","source":["class Person:\n","    def __init__(self, name, job, age):\n","        self.name = name\n","        self.job = job\n","        self.age = age\n","\n","    def __repr__(self):\n","        return f\"Person: {self.name}, job: {self.job}, age: {self.age}\""],"metadata":{"id":"kRK_NP1k1Eu6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NLnTnfMo1QqZ","executionInfo":{"status":"ok","timestamp":1696777720043,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"34b946eb-c5b3-4637-cb90-2de4ee41dbcd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person: Geralt, job: Witcher, age: 30\n"]}]},{"cell_type":"markdown","source":["2. Нет корректного сравнения \"из коробки\":"],"metadata":{"id":"SO4QCRpH0q6M"}},{"cell_type":"code","source":["person2 = Person(\"Yennefer\", \"Sorceress\", 25)\n","person3 = Person(\"Yennefer\", \"Sorceress\", 25)\n","print(person2 == person3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IjPt6w4v0jFP","executionInfo":{"status":"ok","timestamp":1696777615428,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f5a8eeca-5080-47af-dd5a-e549b2f02852"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","137476458489616\n","137476458198880\n"]}]},{"cell_type":"markdown","source":["Тоже можем починить - больше кода добавляется в наш класс!"],"metadata":{"id":"AXE5fCZ109qF"}},{"cell_type":"code","source":["class Person:\n","    def __init__(self, name, job, age):\n","        self.name = name\n","        self.job = job\n","        self.age = age\n","\n","    def __repr__(self):\n","        return f\"Person(name='{self.name}', job='{self.job}', age={self.age})\"\n","\n","    def __eq__(self, other):\n","        return self.name == other.name and self.job == other.job and self.age == other.age"],"metadata":{"id":"zPMerJZZ1ZPm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person2 = Person(\"Yennefer\", \"Sorceress\", 25)\n","person3 = Person(\"Yennefer\", \"Sorceress\", 25)\n","print(person2 == person3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xk3co3Rk2eZf","executionInfo":{"status":"ok","timestamp":1696778024918,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c2a01aea-ff68-4575-e7f0-0e242e0423d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"markdown","source":["Уже чувствуется боль... А мы даже не добавили проверок типов при инициализации..."],"metadata":{"id":"T3jbJanz1x1O"}},{"cell_type":"markdown","source":["Что предлагает `@dataclass`?"],"metadata":{"id":"0pWCvO8N2Aqh"}},{"cell_type":"code","source":["from dataclasses import dataclass\n","\n","\n","@dataclass\n","class Person:\n","    name: str\n","    job: str\n","    age: int"],"metadata":{"id":"Ac3lXpkL2DzC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j8igURe32TX4","executionInfo":{"status":"ok","timestamp":1696778029091,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"04bcd315-ab4a-482a-fa67-c9b78e93bc77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(name='Geralt', job='Witcher', age=30)\n"]}]},{"cell_type":"code","source":["person2 = Person(\"Yennefer\", \"Sorceress\", 25)\n","person3 = Person(\"Yennefer\", \"Sorceress\", 25)\n","print(person2 == person3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Do4J1LNE2cYc","executionInfo":{"status":"ok","timestamp":1696778029092,"user_tz":-180,"elapsed":12,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d4c90d24-bf45-4c9c-ba04-fc2009a7d8c5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"markdown","source":["Вся \"грязь\" сделана за нас!"],"metadata":{"id":"pG-2sMPk2lNv"}},{"cell_type":"markdown","source":["Что еще может датакласс?"],"metadata":{"id":"oxAnJhyr24FS"}},{"cell_type":"markdown","source":["### Сравнение и сортировка"],"metadata":{"id":"1KXJhuaQ272h"}},{"cell_type":"code","source":["from dataclasses import dataclass\n","\n","\n","@dataclass(order=True)\n","class Person:\n","    sort_index: int   # Фиксированное имя\n","    name: str\n","    job: str\n","    age: int\n","\n","    def __post_init__(self):\n","        self.sort_index = self.age"],"metadata":{"id":"BzGj8iYq3Cnv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","person2 = Person(\"Yennefer\", \"Sorceress\", 25)\n","print(person1 > person2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":218},"id":"K8INWWe93QoR","executionInfo":{"status":"error","timestamp":1696778245371,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9672eb5c-86d7-42ca-e1d0-a0f9831237e9"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-a43db5188fc4>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mperson1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPerson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Geralt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Witcher\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mperson2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPerson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Yennefer\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Sorceress\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m25\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperson1\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mperson2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Person.__init__() missing 1 required positional argument: 'age'"]}]},{"cell_type":"markdown","source":["Опаньки, теперь от нас требуется указывать 4 аргумента. Как подсказать dataclass, что sort_index не передается при инициализации?"],"metadata":{"id":"ReodKytb3eRs"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","\n","\n","@dataclass(order=True)\n","class Person:\n","    sort_index: int = field(init=False)  # Подсказываем, что при инициации значение не нужно\n","    name: str\n","    job: str\n","    age: int\n","\n","    def __post_init__(self):\n","        self.sort_index = self.age"],"metadata":{"id":"c7kP3BFk3nQ6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","person2 = Person(\"Yennefer\", \"Sorceress\", 25)\n","print(person1 > person2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bLc1cEYV31HZ","executionInfo":{"status":"ok","timestamp":1696778378100,"user_tz":-180,"elapsed":245,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c3fc8b72-8d8c-4be3-a798-7813b64d2a2e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"markdown","source":["Ура, победа!"],"metadata":{"id":"6e4_Oi8X33En"}},{"cell_type":"code","source":["print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8xu43_6t38rQ","executionInfo":{"status":"ok","timestamp":1696778416722,"user_tz":-180,"elapsed":10,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d2604618-93d5-4179-8b37-e0ece15e84ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(sort_index=30, name='Geralt', job='Witcher', age=30)\n"]}]},{"cell_type":"markdown","source":["Не совсем, `sort_index` при `print` нам тоже не нужен! Уберем:"],"metadata":{"id":"l8601Ul83_jz"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","\n","\n","@dataclass(order=True)\n","class Person:\n","    sort_index: int = field(init=False, repr=False)\n","    name: str\n","    job: str\n","    age: int\n","\n","    def __post_init__(self):\n","        self.sort_index = self.age"],"metadata":{"id":"IiY1TDWc4INy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mKvI3yzC4Nj3","executionInfo":{"status":"ok","timestamp":1696778482675,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"89788888-be91-42f4-84be-f71dbf4a88fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(name='Geralt', job='Witcher', age=30)\n"]}]},{"cell_type":"markdown","source":["### Значения по умолчанию"],"metadata":{"id":"jrs-R38J4Z6e"}},{"cell_type":"markdown","source":["Датаклассы поддерживают и это:"],"metadata":{"id":"x_jrSAra4b_a"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","\n","\n","@dataclass(order=True)\n","class Person:\n","    sort_index: int = field(init=False, repr=False)\n","    name: str\n","    job: str\n","    age: int\n","    strength: int = 100\n","\n","    def __post_init__(self):\n","        self.sort_index = self.strength"],"metadata":{"id":"hHX3kOzt4fLi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8t5ZIeih4jRC","executionInfo":{"status":"ok","timestamp":1696779135931,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"567832de-e135-48ac-9bad-f4d73229a5a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(name='Geralt', job='Witcher', age=30, strength=100)\n"]}]},{"cell_type":"code","source":["hash(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":181},"id":"NWIvzTT56rbS","executionInfo":{"status":"error","timestamp":1696779135932,"user_tz":-180,"elapsed":11,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"32f22c26-bed8-47fb-cc91-401e85a4dcdf"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-0a2cad490525>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhash\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperson1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: unhashable type: 'Person'"]}]},{"cell_type":"markdown","source":["А что делать, если хотим получать значение по умолчанию с помощью функции? Например, случайно генерировать:"],"metadata":{"id":"6o4rUsyO66ht"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","import random\n","import string\n","\n","\n","def generate_id():\n","    return \"\".join(random.choices(string.ascii_uppercase, k=12))\n","\n","\n","@dataclass(order=True)\n","class Person:\n","    sort_index: int = field(init=False, repr=False)\n","    name: str\n","    job: str\n","    age: int\n","    strength: int = 100\n","    id: str = field(default_factory=generate_id)\n","\n","    def __post_init__(self):\n","        self.sort_index = self.strength"],"metadata":{"id":"S47FmvTI7H7y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S0gNCO_D7mi3","executionInfo":{"status":"ok","timestamp":1696779366862,"user_tz":-180,"elapsed":265,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"755d30a3-5da4-4944-d397-b59adbf40261"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(name='Geralt', job='Witcher', age=30, strength=100, id='NOCYYSBLDVJU')\n"]}]},{"cell_type":"markdown","source":["Если хотим убрать возможность убрать \"ручное\" присвоение id:"],"metadata":{"id":"wMn6fu-t7oOX"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","import random\n","import string\n","\n","\n","def generate_id():\n","    return \"\".join(random.choices(string.ascii_uppercase, k=12))\n","\n","\n","@dataclass(order=True)\n","class Person:\n","    sort_index: int = field(init=False, repr=False)\n","    name: str\n","    job: str\n","    age: int\n","    strength: int = 100\n","    id: str = field(init=False, default_factory=generate_id)\n","\n","    def __post_init__(self):\n","        self.sort_index = self.strength"],"metadata":{"id":"2XgCxfUP7nwl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M2fZJC8D7xr_","executionInfo":{"status":"ok","timestamp":1696779412111,"user_tz":-180,"elapsed":249,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2d11539b-4341-4aa0-8343-a8ec651c0d60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(name='Geralt', job='Witcher', age=30, strength=100, id='HKLNJKNLTCAW')\n"]}]},{"cell_type":"markdown","source":["А можем ли использовать как ключи словаря?"],"metadata":{"id":"YWXTyaQM7ynb"}},{"cell_type":"code","source":["hash(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":181},"id":"oO70BQyU72lA","executionInfo":{"status":"error","timestamp":1696779436936,"user_tz":-180,"elapsed":11,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"005a8caa-7753-46a6-e290-ac1cf49b06bf"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-0a2cad490525>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhash\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperson1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: unhashable type: 'Person'"]}]},{"cell_type":"markdown","source":["### Объекты readonly"],"metadata":{"id":"0ssYdsVZ4o5Y"}},{"cell_type":"markdown","source":["Можем заморозить объекты:"],"metadata":{"id":"ddvzE-Ge4sVg"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","\n","\n","@dataclass(order=True, frozen=True) # frozen - нельзя менять, как frozenset\n","class Person:\n","    sort_index: int = field(init=False, repr=False)\n","    name: str\n","    job: str\n","    age: int\n","    strength: int = 100\n","\n","    def __post_init__(self):\n","        self.sort_index = self.strength"],"metadata":{"id":"iyq_ej5z4veH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Проблема:"],"metadata":{"id":"VVg6QIzm46yB"}},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"id":"uC5giM5y46dz","executionInfo":{"status":"error","timestamp":1696778669722,"user_tz":-180,"elapsed":372,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ce16639f-b1ca-474a-a3f3-f5b51e0bad7b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FrozenInstanceError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFrozenInstanceError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-3ad329fdb584>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mperson1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPerson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Geralt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Witcher\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperson1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<string>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, job, age, strength)\u001b[0m\n","\u001b[0;32m<ipython-input-32-3e0096139e8a>\u001b[0m in \u001b[0;36m__post_init__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__post_init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrength\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<string>\u001b[0m in \u001b[0;36m__setattr__\u001b[0;34m(self, name, value)\u001b[0m\n","\u001b[0;31mFrozenInstanceError\u001b[0m: cannot assign to field 'sort_index'"]}]},{"cell_type":"markdown","source":["Как быть? Воспользоваться \"обходным вариантом\":"],"metadata":{"id":"h5kefqdS4-jI"}},{"cell_type":"code","source":["from dataclasses import dataclass, field\n","\n","\n","@dataclass(order=True, frozen=True) # frozen - нельзя менять, как frozenset\n","class Person:\n","    sort_index: int = field(init=False, repr=False)\n","    name: str\n","    job: str\n","    age: int\n","    strength: int = 100\n","\n","    def __post_init__(self):\n","        object.__setattr__(self, \"sort_index\", self.strength)"],"metadata":{"id":"CY6aWXos5Gxq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["person1 = Person(\"Geralt\", \"Witcher\", 30)\n","print(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jv5sKABk5Rk3","executionInfo":{"status":"ok","timestamp":1696778755857,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"64c91b25-92dc-463f-b16e-f880eec9bd7f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person(name='Geralt', job='Witcher', age=30, strength=100)\n"]}]},{"cell_type":"code","source":["person1.strength = 200"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":218},"id":"vRQIuRWW5Tj_","executionInfo":{"status":"error","timestamp":1696778772425,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"115a8e34-654d-42eb-c504-4eb952cb26ca"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FrozenInstanceError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFrozenInstanceError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-e9bf8f47c701>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mperson1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrength\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<string>\u001b[0m in \u001b[0;36m__setattr__\u001b[0;34m(self, name, value)\u001b[0m\n","\u001b[0;31mFrozenInstanceError\u001b[0m: cannot assign to field 'strength'"]}]},{"cell_type":"code","source":["hash(person1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U9ls1U706kln","executionInfo":{"status":"ok","timestamp":1696779103818,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"37a7df52-384d-44f4-d7a9-733617d7031d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-5385388366469133182"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["## Метаклассы"],"metadata":{"id":"WscmUn-XsECk"}},{"cell_type":"markdown","source":["В Python нет возможность перегружать методы обычного класса - вызывать по факту разные методы с одним и тем же именем в зависимости от типов получаемых аргументов.\n","\n","Пример:"],"metadata":{"id":"aQ-NYxH2sHHW"}},{"cell_type":"code","source":["class A:\n","    def f(self, x: int):\n","        print('A.f int overload', self, x)\n","\n","    def f(self, x: str):\n","        print('A.f str overload', self, x)\n","\n","    def f(self, x, y):\n","        print('A.f two arg overload', self, x, y)"],"metadata":{"id":"SzPLJwLjsGi9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["В таком случае нижеидущее определение метода перетирает предыдущее:"],"metadata":{"id":"78BX8VibslB2"}},{"cell_type":"code","source":["a = A()\n","a.f(1)"],"metadata":{"id":"KaehTyRlsF2U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a.f('1')"],"metadata":{"id":"plpxC5TkyNyp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a.f(1, 2)"],"metadata":{"id":"MnOaa6TiyP9z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Но перегрузку можно получить с помощью метаклассов!"],"metadata":{"id":"objKHva8tDD3"}},{"cell_type":"markdown","source":["Что такое **метаклассы**?"],"metadata":{"id":"UeR97cKvyXtq"}},{"cell_type":"markdown","source":["Каждый объект в Python имеет свой тип:"],"metadata":{"id":"Veg0XmF-ybCZ"}},{"cell_type":"code","source":["print(f'{type(42)=}')\n","print(f'{type(\"hello\")=}')\n","print(f'{type([])=}')\n","print(f'{type(a)=}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OPaUI37XswHT","executionInfo":{"status":"ok","timestamp":1696844121736,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"13a1a4ac-58e5-44b8-a066-c7ffc9449c8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["type(42)=<class 'int'>\n","type(\"hello\")=<class 'str'>\n","type([])=<class 'list'>\n","type(a)=<class '__main__.A'>\n"]}]},{"cell_type":"markdown","source":["Классы позволяют создавать экземпляры себя. Но сами классы так же являются объектами, значит должны иметь свой тип:"],"metadata":{"id":"JzRApwQ4yqh-"}},{"cell_type":"code","source":["print(f'{type(int)=}')\n","print(f'{type(str)=}')\n","print(f'{type(list)=}')\n","print(f'{type(A)=}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LRmzDt9OyoIh","executionInfo":{"status":"ok","timestamp":1696844219551,"user_tz":-180,"elapsed":256,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"00429d95-6919-4850-b726-bf704c1ee9c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["type(int)=<class 'type'>\n","type(str)=<class 'type'>\n","type(list)=<class 'type'>\n","type(A)=<class 'type'>\n"]}]},{"cell_type":"markdown","source":["Тип каждого из этих классов - `type`."],"metadata":{"id":"YKq641R_zGq8"}},{"cell_type":"markdown","source":["Значит, так же, как можно создать \"на лету\" экземпляр класса `int` - число, можно создать экземпляр класса `type` - новый класс:"],"metadata":{"id":"9KsNeuByzUZT"}},{"cell_type":"code","source":["x = int()\n","print(f\"{x=}\")\n","\n","B = type('B', (), {})\n","print(f'{B=}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l28pJByzy6V_","executionInfo":{"status":"ok","timestamp":1696844387810,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5e4d659b-d9b9-47fe-fad3-c3e2c6d1e961"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x=0\n","B=<class '__main__.B'>\n"]}]},{"cell_type":"markdown","source":["По сути, объявление класса через `class MyClass` - \"синтаксический сахар\" вокруг создания экземпляря `type`:"],"metadata":{"id":"zdu9UUP6zzAm"}},{"cell_type":"code","source":["def make_A():\n","    name = 'A'\n","    bases = ()  # от чего наследуемся\n","\n","    a = 1\n","    b = 'hello'\n","\n","    def f(self):\n","        return 42\n","\n","    namespace = {'a': a, 'b': b, 'f': f}\n","    A = type(name, bases, namespace)\n","    return A"],"metadata":{"id":"METLMeN6zpIf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["A = make_A()\n","print(A)\n","\n","a = A()\n","print(a.a, a.b, a.f())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzlIS26A0VOK","executionInfo":{"status":"ok","timestamp":1696844605131,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8a542fc2-ed4d-4921-f5f0-34c18fc38e91"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class '__main__.A'>\n","1 hello 42\n"]}]},{"cell_type":"markdown","source":["Так где же здесь появляются метаклассы?\n","\n","**Метаклассы** - наследники класса `type`, которые позволяют кастомизировать процесс создания новых классов."],"metadata":{"id":"97MYKGdH0moS"}},{"cell_type":"markdown","source":["Создадим простейший метакласс:"],"metadata":{"id":"zG0vcwHC1Aqq"}},{"cell_type":"code","source":["class MyMetaclass(type):  # обязательно!\n","    pass\n","\n","class A(metaclass=MyMetaclass):  # обязательно с ключевым словом!\n","    pass"],"metadata":{"id":"G1cwKnAb0Wew"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = A()\n","\n","print(f'{type(a)=}')\n","print(f'{type(A)=}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7j_hlbdn1OL7","executionInfo":{"status":"ok","timestamp":1696844825205,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d18df107-7552-4cda-f5e9-2fe2321103a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["type(a)=<class '__main__.A'>\n","type(A)=<class '__main__.MyMetaclass'>\n"]}]},{"cell_type":"markdown","source":["Добавим функционал - будем считать время создания класса и сохранять в атрибут:"],"metadata":{"id":"LHlSkaXX1kAH"}},{"cell_type":"code","source":["import time\n","\n","class LoadTimeMeta(type):\n","    base_time = time.perf_counter()\n","\n","    def __new__(mcs, name, bases, namespace):\n","        print(mcs, name, bases, namespace)  # выводим аргументы, которые принимает __new__ для метаклассов\n","        namespace['__class_load_time__'] = time.perf_counter() - LoadTimeMeta.base_time  # добавляем атрибут\n","        return super().__new__(mcs, name, bases, namespace)  # делегируем процесс создания класса обратно type\n","\n","class A(metaclass=LoadTimeMeta):\n","    pass\n","\n","class B(A):\n","    pass"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TIppbpjn1SMi","executionInfo":{"status":"ok","timestamp":1696845140058,"user_tz":-180,"elapsed":266,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"64015235-18d0-4c5b-f6bb-3a4c485589a2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class '__main__.LoadTimeMeta'> A () {'__module__': '__main__', '__qualname__': 'A'}\n","<class '__main__.LoadTimeMeta'> B (<class '__main__.A'>,) {'__module__': '__main__', '__qualname__': 'B'}\n"]}]},{"cell_type":"code","source":["print(f\"{A.__class_load_time__=} after base time\")\n","print(f\"{B.__class_load_time__=} after base time\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h61gvHRL2bK0","executionInfo":{"status":"ok","timestamp":1696845232688,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e61114a9-838c-4195-d8d7-0bc95a7a0ee6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A.__class_load_time__=0.005386454000017693 after base time\n","B.__class_load_time__=0.006714731000101892 after base time\n"]}]},{"cell_type":"markdown","source":[">**Замечание** - метаклассы наследуются!"],"metadata":{"id":"QNrij9uw25y8"}},{"cell_type":"code","source":["print(f\"{type(B)=}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1hCbqgYV23X3","executionInfo":{"status":"ok","timestamp":1696845291574,"user_tz":-180,"elapsed":11,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ee98022a-b93e-4cdb-ae28-f321c90eb34d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["type(B)=<class '__main__.LoadTimeMeta'>\n"]}]},{"cell_type":"markdown","source":["Где применяются метаклассы? При создании абстрактных базовых классов (ABC) -"],"metadata":{"id":"YeXwZghX3Plx"}},{"cell_type":"code","source":["from abc import ABCMeta\n","\n","\n","class ABC(metaclass=ABCMeta):\n","    pass\n","\n","class A(ABC):\n","    def __init__(self, *args, **kwargs):\n","        print(\"init\", self, args, kwargs)\n","\n","    @abstractmethod\n","    def f(self):\n","        pass\n","\n","    @abstractmethod\n","    def g(self):\n","        pass\n","\n","class B(A):\n","    def f(self):\n","        print('f!')\n","\n","    def g(self):\n","        print('g!')"],"metadata":{"id":"2U5AGpFE3F1G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = A()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":181},"id":"znF2L0YB5bkT","executionInfo":{"status":"error","timestamp":1696846229321,"user_tz":-180,"elapsed":5,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"19b9e6a9-1bb2-44d0-e40d-8e9320ee5546"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-7f181d8f00b8>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mA\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: Can't instantiate abstract class A with abstract methods f, g"]}]},{"cell_type":"code","source":["b = B()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VEl0CQGU5cln","executionInfo":{"status":"ok","timestamp":1696846232136,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ac837fe3-cf6b-48a4-9fd0-94346f12d9e3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["init <__main__.B object at 0x7c0c3d126800> () {}\n"]}]}],"metadata":{"celltoolbar":"Слайд-шоу","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"colab":{"provenance":[{"file_id":"18c5OL-Wtw4s3O4QqS1BuaDK_cwbjHirM","timestamp":1696776863621},{"file_id":"1BUsU_2fjV5lMn6C-7kqDT6JeOTc28AAl","timestamp":1666607734636},{"file_id":"1eY_10LxoTlxaMyyCvPrR8czkwAHH6D9a","timestamp":1663598607848}],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}