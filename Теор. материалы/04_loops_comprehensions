{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"12SzxceVc8KV10xaoRwfa6qx2qBxMf_K2","timestamp":1707640454004},{"file_id":"1HgSiy1D2PRP3UvrBzPOVSoYOAAbs9pk4","timestamp":1674377694006},{"file_id":"1cJTLNBRiBP3IWdVd18_Yb7pUNC7qQQZl","timestamp":1647268830672},{"file_id":"1s851KDSNVF7Rhxl-fMtLcpv5YSO02_dR","timestamp":1625412382352},{"file_id":"1zl-5Yhzv2lU0Jpbwg_Lkk2Yb0Yv5b4hH","timestamp":1624896241588},{"file_id":"1un-TCIsuKBHA4j3jK0Q6wCWFYBZrOefh","timestamp":1623587599033},{"file_id":"18gB6YUf2N6MSWKPvt9eYY5yyOO71Ov9g","timestamp":1617126671806},{"file_id":"1f6sbw0DHnCR-sYAynzetRD2lqK_zbxfK","timestamp":1617116588082},{"file_id":"1CcVG8lnNDLcFEold-2ur4C_rSrlP9Ita","timestamp":1596697984482}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","source":["# Циклы"],"metadata":{"id":"G7lV7CBKNL2j"}},{"cell_type":"markdown","source":["Циклы в программирования позволяют выполнить набор команд некоторое (часто заранее неопределенное) количество раз.\n","\n","В Python для этого есть два типа циклов."],"metadata":{"id":"hMbIX2Z3JEFk"}},{"cell_type":"markdown","source":["## Цикл `while`"],"metadata":{"id":"tEo3rIoAQfYx"}},{"cell_type":"markdown","source":["Часто необходимо продолжать выполнять какие-либо действия до тех пор, пока условие верно. Для этого пригождается циклы `while`. Его синтаксис выглядит следующим образом:\n","\n","```python\n","while condition:\n","    do_something()\n","```"],"metadata":{"id":"HjlUaKbSQiS3"}},{"cell_type":"markdown","source":["Простыми словами, цикл `while` работает по принципу:\n","\n",">Пока что-то истинно `while condition:`, выполняй набор команд (`do_something()`)"],"metadata":{"id":"8GEZUbOjtnS7"}},{"cell_type":"code","source":["greetings = 0\n","\n","while greetings < 3:\n","    print(greetings, 'Hello!')\n","    greetings = greetings + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"32yvOvdbRAoC","executionInfo":{"status":"ok","timestamp":1674554808350,"user_tz":-180,"elapsed":270,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f4267d77-d3a8-4f04-88b1-802bdc38d907"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 Hello!\n","1 Hello!\n","2 Hello!\n"]}]},{"cell_type":"markdown","source":["### Оператор `break`"],"metadata":{"id":"uyHVKhjAHRjN"}},{"cell_type":"markdown","source":["Можем прервать выполнение цикла (даже до того, пока условие перестанет выполняться) с помощью оператора `break`:"],"metadata":{"id":"6t0pgwfQRFEs"}},{"cell_type":"code","source":["i = 0\n","summ = 0\n","\n","# Сумма первых 100 чисел\n","while True:\n","    i += 1\n","    summ += i\n","    if not i < 100: break\n","\n","print(summ)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"snCRuqExRaPW","executionInfo":{"status":"ok","timestamp":1674555073445,"user_tz":-180,"elapsed":243,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"6a70cff5-a6fd-4135-a071-b9f1011c83af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5050\n"]}]},{"cell_type":"code","source":["help(sum)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zwSKZoqlUn2A","executionInfo":{"status":"ok","timestamp":1662577184725,"user_tz":-180,"elapsed":436,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2984bac0-b24f-45ac-b074-d147a7da4e6d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on built-in function sum in module builtins:\n","\n","sum(iterable, start=0, /)\n","    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n","    \n","    When the iterable is empty, return the start value.\n","    This function is intended specifically for use with numeric values and may\n","    reject non-numeric types.\n","\n"]}]},{"cell_type":"markdown","source":["**Замечания:**\n","1. хотелось бы назвать переменную для суммы как `sum`, но это имя стандартной функции, технически можно переопределить `sum` как переменную, но так крайне не рекомендуется делать\n","2. можно написать условие и действие на одной строке, если оно одно - это допустимо стилистически"],"metadata":{"id":"_Cp8ozmuR1fp"}},{"cell_type":"markdown","source":["### Оператор `continue`"],"metadata":{"id":"BjX7NWEHHMYO"}},{"cell_type":"markdown","source":["В некоторых случаях необходимо форсированно перейти к следующей итерации цикла. Например, не все элементы нам необходимо обрабатывать, а лишь те, что подходят по критерию."],"metadata":{"id":"PxN2kxGV_mG7"}},{"cell_type":"markdown","source":["Для форсированного перехода к следующей итерации цикла используется оператор `continue`:"],"metadata":{"id":"IJt1D9feSMXX"}},{"cell_type":"code","source":["i = 0\n","k = 5\n","\n","summ = 0  # Сумма первых 100 чисел не кратных k\n","\n","while i < 100:\n","    i += 1\n","    if not i % k: continue  # not i % k эквивалентно i % k == 0\n","\n","    summ += i\n","\n","print(summ)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iB-m7Of6SPPb","executionInfo":{"status":"ok","timestamp":1662577491289,"user_tz":-180,"elapsed":268,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"6d1faab0-a0fe-4237-e05c-d8169de901c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4000\n"]}]},{"cell_type":"markdown","source":["Можно ли обойтись без `continue`? Да, можно использовать `if-else`:"],"metadata":{"id":"_i5Jbxq4GzdA"}},{"cell_type":"code","source":["i = 0\n","k = 5\n","\n","summ = 0  # Сумма первых 100 чисел не кратных k\n","\n","while i < 100:\n","    i += 1\n","    if i % k:\n","        summ += i\n","\n","print(summ)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PCX3UxpbG5L4","executionInfo":{"status":"ok","timestamp":1674384757959,"user_tz":-180,"elapsed":364,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"26100541-ccb7-4231-c6bb-3d9582ef893d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4000\n"]}]},{"cell_type":"markdown","source":["Однако, если условий перехода к следующей итерации несколько, то количество таких `else` и отступов, связанных с ними, увеличивается - читаемость кода ухудшается."],"metadata":{"id":"VYXY1R02G-b9"}},{"cell_type":"markdown","source":["### Конструкция `while-else`"],"metadata":{"id":"G9yHdSr0HVdA"}},{"cell_type":"markdown","source":["В Python имеется конструкция `while-else`, которая проверяет был ли выход из цикла с помощью `break`:"],"metadata":{"id":"Ks66T0kFSX4g"}},{"cell_type":"code","source":["numbers = [1, 3, 7, 5, 10, 6]\n","i = 0\n","\n","while i < len(numbers):\n","    if numbers[i] == 5:\n","        print('Нашли пятёрку')\n","        break\n","    i += 1\n","else: # если break не сработал\n","    print('Не нашли пятёрку')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iBDAzu0PSZT0","executionInfo":{"status":"ok","timestamp":1674555789068,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4a7bd4f0-e043-47a2-f683-adf2b9a3b31d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Нашли пятёрку\n"]}]},{"cell_type":"markdown","source":[">**Примечания**\n",">- `while-else` - редко используемая конструкция (почти наверняка не встретите в большинстве кода)\n",">- не очень удачное именование - `else` означает \"другое\", так почему же выполняется если цикл отработал корректно?! Прична - исторически сложилось + синтаксис GOTO других языков\n",">- на практике - советуют добавлять коммент, напоминающий читателю что означает этот `else` после `while`\n",">- единственное практически реальное применение - замена \"флага\""],"metadata":{"id":"9JoR9-ZfH9b2"}},{"cell_type":"code","source":["numbers = [1, 3, 7, 8, 10, 6]\n","i = 0\n","\n","flag = False\n","while i < len(numbers):\n","    if numbers[i] == 5:\n","        print('Нашли пятёрку')\n","        flag = True\n","        break\n","    i += 1\n","if not flag:\n","    print('Не нашли пятёрку')"],"metadata":{"id":"MvLrZ3kaKGm9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Цикл `for`"],"metadata":{"id":"Yoiwt0_8Sjii"}},{"cell_type":"markdown","source":["В Python `for`-цикл устроен следующим образом:\n","\n","```python\n","for variable in iterable_var:\n","    commands(varible)\n","```"],"metadata":{"id":"1ggIOjGESoZ5"}},{"cell_type":"markdown","source":["где `iterable_var` - переменная, которая может выдавать какие-либо значения. Чаще всего, это контейнеры, для каждого из элементов которого мы выполняем одинаковый набор команд, описанный в цикле."],"metadata":{"id":"g3BzLVwSuWYF"}},{"cell_type":"markdown","source":["##### **Какой класс подходит для цикла `for` - класс `Iterable`**"],"metadata":{"id":"j7Qui5eaunv8"}},{"cell_type":"markdown","source":["Технически, в качестве `iterable_var` можно брать любой объект, который является `iterable`, т.е. у которых определен мето `__next__`, с помощью которого можно запросить следующий их элемент.\n","\n","Среди `iterable`-объектов выделяют **последовательности** (sequences), которые помимо получения следующего элемента могут выдавать элементы и по индексу.\n","\n","**Примеры последовательностей:**\n","- списки\n","- кортежи\n","- строки\n","\n","**Примеры не-последовательностей:**\n","- множества\n","- словари\n","- *генераторы*"],"metadata":{"id":"WUzQwoc2uUEM"}},{"cell_type":"markdown","source":["### Применение `for`-циклов с контейнерами"],"metadata":{"id":"yxYvPNAOvCkw"}},{"cell_type":"markdown","source":["Примеры `for`-циклов по спискам, кортежам, строкам:"],"metadata":{"id":"u3at3SJuUbwG"}},{"cell_type":"code","source":["list_example = ['list', 1, 2, 3, 4, 5]\n","\n","for item in list_example:  # одно из принятых имен для переменных цикла - item, элемент\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lIuUCCvUUfRx","executionInfo":{"status":"ok","timestamp":1674556135163,"user_tz":-180,"elapsed":258,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5c322f48-8d6a-40f0-d73f-b365c350633a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["list 1 2 3 4 5 "]}]},{"cell_type":"code","source":["tuple_example = ('tuple', 1, 2, 3, 4, 5)\n","for item in tuple_example:\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f4B_4WVZNjNM","executionInfo":{"status":"ok","timestamp":1674556140333,"user_tz":-180,"elapsed":250,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"13f68350-98da-4986-bee4-4a3e3980bd8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tuple 1 2 3 4 5 "]}]},{"cell_type":"code","source":["string_example = \"string12345\"\n","\n","for item in string_example:\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J9vjUtzcNlaB","executionInfo":{"status":"ok","timestamp":1674556144424,"user_tz":-180,"elapsed":240,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2b9ec999-b927-44b7-e2ee-d9a29f1d16d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["s t r i n g 1 2 3 4 5 "]}]},{"cell_type":"markdown","source":["Примеры `for`-циклов по множествам, словарям:"],"metadata":{"id":"NRFQESX5UmAw"}},{"cell_type":"code","source":["set_example = {'set', 1, 2, 3, 4, 5}\n","\n","for item in set_example:\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_sRc09bEUmbQ","executionInfo":{"status":"ok","timestamp":1674556170821,"user_tz":-180,"elapsed":293,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c13ca977-d76c-4874-88c5-8b89887eac02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3 4 5 set "]}]},{"cell_type":"markdown","source":["Хотя мы и не можем обратиться к конкретному элементу множества по индексу, мы можем пройтись по всем элементам множества с помощью цикла `for`:"],"metadata":{"id":"rPyRSheRvcFr"}},{"cell_type":"code","source":["set_example[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"GvgkGKPWYBqJ","executionInfo":{"status":"error","timestamp":1674556200333,"user_tz":-180,"elapsed":268,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"7c2e0c22-773f-4e22-8363-4c1c5ce72bc0"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-195ff0a1876b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mset_example\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'set' object is not subscriptable"]}]},{"cell_type":"markdown","source":["Аналогично при работе со словарями. Но в случае словарей мы можем пробегаться циклом как по ключам, так и по значениям и даже сразу по парам *ключ-значение*:"],"metadata":{"id":"v4oaURG8vy4b"}},{"cell_type":"code","source":["dict_example = {'dict': \"value0\", 1: \"value1\", 2: \"value2\", 3: \"value3\", 4: \"value4\", 5: \"value5\"}"],"metadata":{"id":"qWuut0y0wCiW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for item in dict_example.keys():\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9fmzNNlKNstF","executionInfo":{"status":"ok","timestamp":1674556248729,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5a5bda6e-4085-42f4-c00b-dd2729039077"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict 1 2 3 4 5 "]}]},{"cell_type":"code","source":["for item in dict_example.values():\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674556257303,"user_tz":-180,"elapsed":633,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"62df8182-c43b-4df0-8b3d-6de6f0574304","id":"ZLVk7qWUvu1H"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["value0 value1 value2 value3 value4 value5 "]}]},{"cell_type":"code","source":["for item in dict_example.items():\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674556264587,"user_tz":-180,"elapsed":309,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9b2b99d1-add1-40a5-8c61-b4d2dfb5d186","id":"L5KT2BCDvu7i"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["('dict', 'value0') (1, 'value1') (2, 'value2') (3, 'value3') (4, 'value4') (5, 'value5') "]}]},{"cell_type":"code","source":["for item in dict_example:\n","    print(item, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674556274472,"user_tz":-180,"elapsed":254,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f8cb4e8c-f8c9-4411-89cb-7ea399e5a1ce","id":"R1hgRrMCvxh4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict 1 2 3 4 5 "]}]},{"cell_type":"markdown","source":["**Примечание** - for-цикл для словаря выдаст ключи словаря, не значения."],"metadata":{"id":"4g7IJIWIUssf"}},{"cell_type":"markdown","source":["Аналогично конструкции `while-else`, существует и конструкция `for-else`:"],"metadata":{"id":"I6hXKApuVcQp"}},{"cell_type":"code","source":["numbers = [1, 3, 7, 8, -5]\n","\n","for n in numbers:\n","    if n == 5:\n","        print('Нашли пятёрку')\n","        break\n","\n","else: # если break не сработал\n","    print('Не нашли пятёрку')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1nmawubtVh2s","executionInfo":{"status":"ok","timestamp":1674556394807,"user_tz":-180,"elapsed":288,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"311b14fe-b1ed-4387-9218-b226a5260f9e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Не нашли пятёрку\n"]}]},{"cell_type":"markdown","source":["##### **Примечание для новеньких - вложенные циклы**"],"metadata":{"id":"Bntzpsy33MUn"}},{"cell_type":"markdown","source":["Циклы можно размещать и внутри других циклов. Рассмотрим на примере одного из методов сортировки списка - сортировки \"пузырьком\":"],"metadata":{"id":"23sZT1VjL89c"}},{"cell_type":"code","source":["list_to_sort = [15, 3, 7, 2, 11, 9, 4, 6, 5]\n","\n","for i in range(len(list_to_sort) - 1):\n","    for j in range(i + 1, len(list_to_sort)):\n","        if list_to_sort[j] < list_to_sort[i]:\n","            list_to_sort[i], list_to_sort[j] = list_to_sort[j], list_to_sort[i]\n","\n","print(list_to_sort)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dn3co1xDMI6z","executionInfo":{"status":"ok","timestamp":1674556543816,"user_tz":-180,"elapsed":245,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"68a45b92-b65b-4534-8489-f56967e90264"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 4, 5, 6, 7, 9, 11, 15]\n"]}]},{"cell_type":"markdown","source":["# `range`"],"metadata":{"id":"kvDeTnszVmsT"}},{"cell_type":"markdown","source":["Что делать, если просто хотим пройти по числам в диапазоне?\n","\n","Решение \"в лоб\", как это делается во многих языках программирования:"],"metadata":{"id":"GWNxJ5CtwREu"}},{"cell_type":"code","source":["i = 0\n","max_i = 10\n","while i < max_i:\n","    print(i, end=' ')\n","    # do_something()\n","    i += 1"],"metadata":{"id":"nOl8Y-5EwXu0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674556705518,"user_tz":-180,"elapsed":265,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e93a83c2-0bfa-4bb3-e56b-e320f35be145"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 1 2 3 4 5 6 7 8 9 "]}]},{"cell_type":"markdown","source":["Это достаточно неудобно для такой часто используемой операции! Поэтому в Python для решения этой задачи ввели специальную функцию - `range` (диапазон)."],"metadata":{"id":"Eyo8qaYTwqaz"}},{"cell_type":"markdown","source":["`range([start,] stop[, step])` возвращает неизменяемую последовательность чисел.\n","\n","По умолчанию `start=0`, `step=1`, и получаем `[0, stop)`."],"metadata":{"id":"Tdq8E4EyU5oE"}},{"cell_type":"code","source":["for i in range(10, 21, 2):\n","    print(i, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZQibTyXZw7Dv","executionInfo":{"status":"ok","timestamp":1674556798957,"user_tz":-180,"elapsed":5,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a050c4e5-4563-42ea-82ac-7eb8c2b18687"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10 12 14 16 18 20 "]}]},{"cell_type":"code","source":["for i in range(10, 20):\n","    print(i, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SSKQUQutw-b4","executionInfo":{"status":"ok","timestamp":1674556808785,"user_tz":-180,"elapsed":249,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4567eed8-d23b-4ef8-dbd4-238606c9ef1d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10 11 12 13 14 15 16 17 18 19 "]}]},{"cell_type":"code","source":["for i in range(7):\n","    print(i, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2vlStTdBrFy","executionInfo":{"status":"ok","timestamp":1674556832335,"user_tz":-180,"elapsed":253,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1133e0d9-0108-4115-ad60-8c4deef54a5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 1 2 3 4 5 6 "]}]},{"cell_type":"markdown","source":["Как и в случае со срезами, шаг может быть отрицательным:"],"metadata":{"id":"QMulYVO1xHIA"}},{"cell_type":"code","source":["for i in range(17, 3, -3):\n","    print(i, end=' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RPydMD_6xMHh","executionInfo":{"status":"ok","timestamp":1674556897009,"user_tz":-180,"elapsed":239,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"29024267-4a9a-4f75-b684-1dc62d97e714"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["17 14 11 8 5 "]}]},{"cell_type":"markdown","source":["Помимо итерирования по `range`, можно проверять входит ли число в него:"],"metadata":{"id":"eu0Vk5Lpw41n"}},{"cell_type":"code","source":["r = range(1, 10, 2)\n","print(type(r), r)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x3-RhkbjVCdd","executionInfo":{"status":"ok","timestamp":1674556964269,"user_tz":-180,"elapsed":238,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b59160c2-6653-49e6-a347-a8ddb96abfeb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'range'> range(1, 10, 2)\n"]}]},{"cell_type":"code","source":["print(6 in r)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CM_COYbkxVLv","executionInfo":{"status":"ok","timestamp":1674556970343,"user_tz":-180,"elapsed":262,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"39c71166-cafd-4c1d-aa71-f8d83dca04c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]},{"cell_type":"markdown","source":["Если хотим получить из `range(...)` список чисел, которые входят в этот диапазон, то можем воспользоваться \"функцией\" `list`:"],"metadata":{"id":"Nonbhf2exYNT"}},{"cell_type":"code","source":["list(r)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f5c7ctAUxUHL","executionInfo":{"status":"ok","timestamp":1674379169706,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f0536fb2-2b5f-465d-a46c-d11c40ca64e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 3, 5, 7, 9]"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["В результате пользоваться `for`-циклом можно пользоваться такими вариантами:"],"metadata":{"id":"0D4i-lKqVImg"}},{"cell_type":"code","source":["name_list = ['Alice', 'Bob', 'Charley']\n","for name in name_list:  # Перебираем элементы списка\n","    print('Hello, ' + name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lCdt706cCLIK","executionInfo":{"status":"ok","timestamp":1674557088278,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1d50a6c3-1940-4310-fb01-1afb1235deea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice\n","Hello, Bob\n","Hello, Charley\n"]}]},{"cell_type":"code","source":["for i in range(len(name_list)):  # Перебираем индексы от 0 до L-1\n","    print('Hello, ' + name_list[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3KDofwsSCa-E","executionInfo":{"status":"ok","timestamp":1674557127056,"user_tz":-180,"elapsed":561,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"eac53fe1-583d-4b45-ae9d-62ba4bceee8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice\n","Hello, Bob\n","Hello, Charley\n"]}]},{"cell_type":"code","source":["for pair in enumerate(name_list): # Перебираем пары индекс-элемент\n","    i, name = pair\n","    print(pair, i, name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l6vIqElJC9VY","executionInfo":{"status":"ok","timestamp":1662578595889,"user_tz":-180,"elapsed":277,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"fb4f8670-7945-4c67-984d-4498e3f4aeff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(0, 'Alice') 0 Alice\n","(1, 'Bob') 1 Bob\n","(2, 'Charley') 2 Charley\n"]}]},{"cell_type":"code","source":["for i, name in enumerate(name_list): # Перебираем пары индекс-элемент\n","    print('Hello, ' + name_list[i] + \"\\t\" + name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tvqikS3HVLNg","executionInfo":{"status":"ok","timestamp":1674557244570,"user_tz":-180,"elapsed":260,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b3cca2a8-81ec-4b61-c3f6-273a75c1ce22"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice\tAlice\n","Hello, Bob\tBob\n","Hello, Charley\tCharley\n"]}]},{"cell_type":"code","source":["i = 0\n","while i < len(name_list):\n","    print(\"Hello\", name_list[i])\n","    i += 2\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GdkaZkkjDrey","executionInfo":{"status":"ok","timestamp":1647456554547,"user_tz":-180,"elapsed":311,"user":{"displayName":"Никита Николаевич Честнов","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04102744290911048542"}},"outputId":"96d4f6cd-2dc1-4a45-d8de-c9790cbc7858"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello Alice\n","Hello Charley\n"]}]},{"cell_type":"code","source":["name_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IGRNQOtTZGaM","executionInfo":{"status":"ok","timestamp":1674557293186,"user_tz":-180,"elapsed":246,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c084b4ba-a7fe-483a-a526-6639cfdb8405"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Alice', 'Bob', 'Charley']"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["list(enumerate(name_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AVIS-22sZIlq","executionInfo":{"status":"ok","timestamp":1674557303860,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a4bf2744-efe7-47d5-a699-9d185dea1e86"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0, 'Alice'), (1, 'Bob'), (2, 'Charley')]"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["# list comprehensions"],"metadata":{"id":"cfPBOP8TVyN5"}},{"cell_type":"markdown","source":["Часто приходится создавать производные списки - новые списки, элементы которых вычисляются из соответствующих элементов другого контейнера. Например, список квадратов чисел:"],"metadata":{"id":"KuFOuPuzx0TD"}},{"cell_type":"code","source":["input_list = [3, 14, 15, 92, 65, 35, 89, 79, 323, 84626]\n","\n","output_list = [0] * len(input_list)  # создаем список из нулей длины как input_list\n","for i, item in enumerate(input_list):  # \"функция\" enumerate позволяет получать не только элеметы, но и их порядковый номер\n","    output_list[i] = input_list[i] ** 2\n","\n","print(output_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GwhwJtyYyClQ","executionInfo":{"status":"ok","timestamp":1674557580656,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b03b8eb3-30dc-4136-c461-0f8d587a074c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[9, 196, 225, 8464, 4225, 1225, 7921, 6241, 104329, 7161559876]\n"]}]},{"cell_type":"markdown","source":["Чтобы упростить создание подобных списков, в Python есть очень удобная штука под названием **list comprehension**, выглядит она вот так:\n","\n","```python\n","[выражение for var in iterable_var if condition]\n","```"],"metadata":{"id":"0RZXvo0sV04_"}},{"cell_type":"markdown","source":["Тогда наш пример выше перепишется как:"],"metadata":{"id":"ROep4iGEy4Hr"}},{"cell_type":"code","source":["output_list = [item ** 2 for item in input_list]\n","print(output_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhpfM-Czy0yr","executionInfo":{"status":"ok","timestamp":1674557581263,"user_tz":-180,"elapsed":6,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a27b33d4-c765-4128-859a-98961c42a3e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[9, 196, 225, 8464, 4225, 1225, 7921, 6241, 104329, 7161559876]\n"]}]},{"cell_type":"markdown","source":["Рассмотрим пример использования условия (`condition`) при создании производных списков. Для этого будем сохранять в выходной список только те элементы, которые делятся на `2`:"],"metadata":{"id":"msDsNRgwzPpG"}},{"cell_type":"code","source":["output_list = [item ** 2 for item in input_list if item % 2 == 0]\n","print(output_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gm1Skimzzi4G","executionInfo":{"status":"ok","timestamp":1674379679013,"user_tz":-180,"elapsed":251,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a177a34d-6a86-4961-f7da-ef19d1599519"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[196, 8464, 7161559876]\n"]}]},{"cell_type":"markdown","source":["`list comprehension` можно использовать в связке с тернарным оператором:"],"metadata":{"id":"GXtv2zxB2ciO"}},{"cell_type":"code","source":["result = [x if x != 7 else 7 ** 25 for x in range(10)]\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gfWLWnh0Fot-","executionInfo":{"status":"ok","timestamp":1674557720343,"user_tz":-180,"elapsed":251,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d991466e-1277-4541-890a-9c98866769be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 2, 3, 4, 5, 6, 1341068619663964900807, 8, 9]\n"]}]},{"cell_type":"markdown","source":["Часто list comprehension используют в связке с range. Например, если вам нужно создать список кубов чисел, которые делятся на 3 без остатка:"],"metadata":{"id":"8f3drJB2zomF"}},{"cell_type":"code","source":["result = [x ** 3 for x in range(10) if x % 3 == 0]\n","print(result)"],"metadata":{"id":"ah4iewI9V90V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674557750770,"user_tz":-180,"elapsed":256,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a7dcc43c-20fa-4b99-ad48-815c7eeb8aa4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 27, 216, 729]\n"]}]},{"cell_type":"markdown","source":["Аналогичный результат классическим способом выглядел бы так:"],"metadata":{"id":"oGjHTp4p0Fck"}},{"cell_type":"code","source":["result = []\n","for x in range(10):\n","    if x % 3 == 0:\n","        result.append(x ** 3)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DZBjR5e0FBnq","executionInfo":{"status":"ok","timestamp":1674557769899,"user_tz":-180,"elapsed":423,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8b164b39-4329-4c49-fbf1-c19645ebb37f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 27, 216, 729]\n"]}]},{"cell_type":"markdown","source":["Можно делать и вложенные list comprehension, но это ухудшает читаемость:"],"metadata":{"id":"Hw4e7gqocDlv"}},{"cell_type":"code","source":["[(y, x) for x in range(2, 10) for y in range(x+1, 10) if y % x == 0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WJQa8RwMb1lW","executionInfo":{"status":"ok","timestamp":1674557803921,"user_tz":-180,"elapsed":262,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"254f1b55-663c-4d05-8a95-0a11e34b6786"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(4, 2), (6, 2), (8, 2), (6, 3), (9, 3), (8, 4)]"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["Код выше аналогичен следующему:"],"metadata":{"id":"yeFJ3c1o0NIc"}},{"cell_type":"code","source":["result = []\n","for x in range(2, 10):\n","    for y in range(x+1, 10):\n","        if y % x == 0:\n","            result.append((y, x))\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TnOekBlk0RO7","executionInfo":{"status":"ok","timestamp":1674557837326,"user_tz":-180,"elapsed":229,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1fc3ca74-0b79-4231-c05b-aab311d6c1a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(4, 2), (6, 2), (8, 2), (6, 3), (9, 3), (8, 4)]\n"]}]},{"cell_type":"markdown","source":["### `dict comprehension` и `set comprehension`"],"metadata":{"id":"NOA4JE7G0mir"}},{"cell_type":"markdown","source":["Можно ли так же удобно создавать не только списки, но и множества и словари?\n","\n","Да, аналогично существуют `dict comprehension` и `set comprehension`:"],"metadata":{"id":"uN1PbcdDcL_A"}},{"cell_type":"code","source":["result = {x: x ** 2 for x in range(10)}\n","print(type(result), result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hMPIDMNXFfXY","executionInfo":{"status":"ok","timestamp":1662578943525,"user_tz":-180,"elapsed":280,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"726a3903-04b8-43bd-93bd-9da61e02b7c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'dict'> {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n"]}]},{"cell_type":"code","source":["result = {x ** 2 for x in range(10)}\n","print(type(result), result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e0Uf5G1KcUvx","executionInfo":{"status":"ok","timestamp":1674557955150,"user_tz":-180,"elapsed":278,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5bfab751-a235-4c37-aa7c-9474f560bae4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'set'> {0, 1, 64, 4, 36, 9, 16, 49, 81, 25}\n"]}]},{"cell_type":"markdown","source":["А что делать, если хотим пройтись по символам строки?\n","\n","Здесь используется следующий трюк:"],"metadata":{"id":"pW4IUYOg1Ixd"}},{"cell_type":"code","source":["string = \"abc\"\n","\n","result = [string[i] for i in range(len(string)) if string[i] != 'c']\n","''.join(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"h23WcCFFbi_p","executionInfo":{"status":"ok","timestamp":1674558033004,"user_tz":-180,"elapsed":244,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"cb59978f-6b33-4918-b919-397adc958bb9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'ab'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":["Мы сначала записываем подходящие буквы в список, а затем соединяем список символов (более формально, список строк) с помощью метода `join`, при этом соединяем их с помощью пустой строки."],"metadata":{"id":"YCT8gqxQ1Qcl"}},{"cell_type":"code","source":["'___'.join(result)  # Можем соединять не только пустой строкой"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"2XIiUwS11l4v","executionInfo":{"status":"ok","timestamp":1674558049504,"user_tz":-180,"elapsed":346,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"0da89497-3f24-420e-b537-eedc2040be54"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'a___b'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["list_of_strings = ['hello', 'world', 'uwu']  # Можем соединять не только список символов, но и любых строк\n","' ^_^ '.join(list_of_strings)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"L7--RZ2r1r6J","executionInfo":{"status":"ok","timestamp":1674558055517,"user_tz":-180,"elapsed":232,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2af751df-3ad8-48b5-d52a-eae8b273bc13"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'hello ^_^ world ^_^ uwu'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["А что насчет кортежей? Можем ли мы так же легко создать производный кортеж, заменив скобки на круглые?"],"metadata":{"id":"6eH8ECOw2JTg"}},{"cell_type":"markdown","source":["Увы, `tuple comprehension` не существует. Вместо этого круглые скобочки дают нам генераторное выражение (generator expression):"],"metadata":{"id":"iOe32dAYg5hL"}},{"cell_type":"code","source":["result = (x ** 2 for x in range(10))\n","print(type(result), result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_iuE5Xlt2q23","executionInfo":{"status":"ok","timestamp":1674558116617,"user_tz":-180,"elapsed":237,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"43dad22e-385d-4eca-93d8-1ea4473425b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'generator'> <generator object <genexpr> at 0x7f588d5f3270>\n"]}]},{"cell_type":"markdown","source":["**Генераторы** - более продвинутая часть Python. Мы обсудим ее в блоке EXTRA на одном из следующих занятий."],"metadata":{"id":"McgC-_O56Paw"}},{"cell_type":"markdown","source":["# `zip`"],"metadata":{"id":"ScMstq3N3QHc"}},{"cell_type":"markdown","source":["Что делать, если хотим пройтись по двум спискам одновременно? Посмотрим на классический подход?"],"metadata":{"id":"ckWSkZVI6k5w"}},{"cell_type":"code","source":["list_a = [1, 3, 5, 7, 9]\n","list_b = [2, 4, 6, 8, 10]\n","list_c = []\n","\n","for i in range(len(list_a)):\n","    list_c.append(list_a[i] + list_b[i])\n","\n","print(list_c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VMHqA6jc6sHv","executionInfo":{"status":"ok","timestamp":1674558227259,"user_tz":-180,"elapsed":5,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"f487853f-faee-4f71-db9a-eb8bb3e80522"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 7, 11, 15, 19]\n"]}]},{"cell_type":"markdown","source":["Постоянно обращаться к элементам по индексу неудобно с точки зрения написания кода и неоптимально с точки зрения скорости работы.\n","\n","Выход \"в лоб\" - объявить переменные внутри цикла:"],"metadata":{"id":"ApyqiVcb7ds6"}},{"cell_type":"code","source":["list_a = [1, 3, 5, 7, 9]\n","list_b = [2, 4, 6, 8, 10]\n","list_c = []\n","\n","for i in range(len(list_a)):\n","    item_a = list_a[i]\n","    item_b = list_b[i]\n","    list_c.append(item_a + item_b)\n","\n","print(list_c)"],"metadata":{"id":"K_VDGoGM7tj6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Каждый раз писать такие присвоения - тоже неудобно. В Python есть встроенная \"функция\" для этого - `zip`:"],"metadata":{"id":"gX2i9_VL7tDt"}},{"cell_type":"code","source":["list_a = [1, 3, 5, 7, 9]\n","list_b = [2, 4, 6, 8, 10]\n","list_c = []\n","\n","for item in zip(list_a, list_b):\n","    list_c.append(item[0] + item[1])\n","\n","print(list_c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e8DNLdgZ8KKe","executionInfo":{"status":"ok","timestamp":1674558249016,"user_tz":-180,"elapsed":255,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"afdde508-6d2d-4be5-e72a-b2d6a6d1fb3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 7, 11, 15, 19]\n"]}]},{"cell_type":"markdown","source":["Каждый раз обращаться по индексу кортежа item для доступа к элементу тоже не очень удобно. Поэтому можно сделать следующее:"],"metadata":{"id":"fK7Yujrf8VPJ"}},{"cell_type":"code","source":["list_a = [1, 3, 5, 7, 9]\n","list_b = [2, 4, 6, 8, 10]\n","list_c = []\n","\n","for item_a, item_b in zip(list_a, list_b):\n","    list_c.append(item_a + item_b)\n","\n","print(list_c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ogw1oZci81tB","executionInfo":{"status":"ok","timestamp":1674382140301,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"dac0ecc5-24a2-4d5d-e737-47eef05bdb98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 7, 11, 15, 19]\n"]}]},{"cell_type":"code","source":["list_a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-R-7Cceoc6BE","executionInfo":{"status":"ok","timestamp":1674558287487,"user_tz":-180,"elapsed":508,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"3be4e112-059d-417c-c7ed-92a12cc97f6e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 3, 5, 7, 9]"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["list_b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_xuZS02nc7Tj","executionInfo":{"status":"ok","timestamp":1674558292886,"user_tz":-180,"elapsed":240,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"0fec161a-b50a-4309-ae65-74f5d665764b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10]"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["list(zip(list_a, list_b))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U5s_UzsQc8wm","executionInfo":{"status":"ok","timestamp":1674558304710,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2c7d6684-4688-47e7-af7b-d3b43390efbe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]"]},"metadata":{},"execution_count":57}]},{"cell_type":"markdown","source":["Но что будет, если контейнеры имеют разное количество элементов?"],"metadata":{"id":"Lc4FL_mnK38H"}},{"cell_type":"code","source":["list_a = [1, 3, 5]\n","list_b = [2, 4, 6, 8, 10]\n","list_c = []\n","\n","for item_a, item_b in zip(list_a, list_b):\n","    list_c.append(item_a + item_b)\n","\n","print(list_c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RHpik1dMK-iM","executionInfo":{"status":"ok","timestamp":1674558325357,"user_tz":-180,"elapsed":251,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e7cab75d-6a7e-4b63-dd9d-a1c90874cc5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 7, 11]\n"]}]},{"cell_type":"markdown","source":["Фактически мы обрежем контейнеры по длине наименьшего."],"metadata":{"id":"yq8QzkPeLAm3"}},{"cell_type":"markdown","source":["Но что если бы мы хотели пройтись по всем элементам наших контейнеров? Что если знаем, как стоит дополнить наши контейнеры?\n","\n","К сожалению, `zip` не позволяет это сделать, однако, мы можем это сделать с помощью функции, скрытом в одном из стандартных модулей Python - `itertools`."],"metadata":{"id":"gIS7zN-yLJau"}},{"cell_type":"markdown","source":["# `itertools`"],"metadata":{"id":"iuX6uARXchGh"}},{"cell_type":"markdown","source":["В Python встрено огромное количество полезных модулей. В рамках нашего курса мы познакомимся с некоторыми из них.\n","\n","Один из часто используемых модулей - модуль [itertools](https://docs.python.org/3/library/itertools.html)."],"metadata":{"id":"2oxPl_9Il1I_"}},{"cell_type":"markdown","source":["Для того, чтобы подключить модуль, можно воспользоваться оператором импорта:"],"metadata":{"id":"ym01JjRem4Rk"}},{"cell_type":"code","source":["import itertools"],"metadata":{"id":"COLQ266Vm1pY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## `zip_longest`"],"metadata":{"id":"OqwZru-698ZB"}},{"cell_type":"markdown","source":["Работает как обычный `zip`, но требует аргумента `fillvalue` (значение для заполнения):"],"metadata":{"id":"TU4D5ETyLtkA"}},{"cell_type":"code","source":["list_a = [1, 3, 5]\n","list_b = [2, 4, 6, 8, 10]\n","list_c = []\n","\n","for item_a, item_b in itertools.zip_longest(list_a, list_b, fillvalue=0):\n","    list_c.append(item_a + item_b)\n","\n","print(list_c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Q2gqdYTLlHs","executionInfo":{"status":"ok","timestamp":1674558483547,"user_tz":-180,"elapsed":245,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5e0afccd-03ef-43d4-8bef-fd7ee0cfbc9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 7, 11, 8, 10]\n"]}]},{"cell_type":"markdown","source":["## `product`"],"metadata":{"id":"IqtHgeCN94Kv"}},{"cell_type":"markdown","source":["Одна из функций этого модуля - функция `product`. Она позволяет удобно и лакончно записывать вложенные циклы разной глубины (цикл-в-цикле):"],"metadata":{"id":"zYZRSQTSmpAo"}},{"cell_type":"code","source":["for i, j, k in itertools.product(range(2), \"abc\", [1, 2, 3]):\n","    print(i, j, k)"],"metadata":{"id":"mdgozOSGnE3M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674558601765,"user_tz":-180,"elapsed":4,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e843e98e-cc7e-4299-8c51-83878bf18cf0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 a 1\n","0 a 2\n","0 a 3\n","0 b 1\n","0 b 2\n","0 b 3\n","0 c 1\n","0 c 2\n","0 c 3\n","1 a 1\n","1 a 2\n","1 a 3\n","1 b 1\n","1 b 2\n","1 b 3\n","1 c 1\n","1 c 2\n","1 c 3\n"]}]},{"cell_type":"markdown","source":["Этот код эквивалентен следующему:"],"metadata":{"id":"lnNVHcDUnFWB"}},{"cell_type":"code","source":["for i in range(2):\n","    for j in \"abc\":\n","        for k in [1,2,3]:\n","            print(i, j, k)"],"metadata":{"id":"WFUhOM2enDYy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674558622265,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"57520c66-0d4d-42b4-82cb-6c549c51a2d2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 a 1\n","0 a 2\n","0 a 3\n","0 b 1\n","0 b 2\n","0 b 3\n","0 c 1\n","0 c 2\n","0 c 3\n","1 a 1\n","1 a 2\n","1 a 3\n","1 b 1\n","1 b 2\n","1 b 3\n","1 c 1\n","1 c 2\n","1 c 3\n"]}]},{"cell_type":"markdown","source":["## Комбинаторика"],"metadata":{"id":"5eQ5iamj96XG"}},{"cell_type":"markdown","source":["Также можно применять для комбинаторики - перестановки, комбинации, комбинации с повторениями:"],"metadata":{"id":"xjVvx2LIcpcw"}},{"cell_type":"code","source":["list(itertools.permutations([1, 2, 3]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B8s2H5cectct","executionInfo":{"status":"ok","timestamp":1647446260642,"user_tz":-180,"elapsed":9,"user":{"displayName":"Никита Николаевич Честнов","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04102744290911048542"}},"outputId":"bb0e0474-09c8-4653-ce98-c8f63499c445"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]"]},"metadata":{},"execution_count":187}]},{"cell_type":"code","source":["list(itertools.combinations([1, 2, 3], 2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nEQC9fjvcwM2","executionInfo":{"status":"ok","timestamp":1647446275883,"user_tz":-180,"elapsed":270,"user":{"displayName":"Никита Николаевич Честнов","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04102744290911048542"}},"outputId":"3de12f1e-4172-4288-d039-982ecaf7b66c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, 2), (1, 3), (2, 3)]"]},"metadata":{},"execution_count":188}]},{"cell_type":"code","source":["list(itertools.combinations_with_replacement([1, 2, 3], 2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_QktzHxwc0EQ","executionInfo":{"status":"ok","timestamp":1647446296990,"user_tz":-180,"elapsed":349,"user":{"displayName":"Никита Николаевич Честнов","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04102744290911048542"}},"outputId":"f446a650-3d2e-4365-84b1-e5076ef8e0ae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]"]},"metadata":{},"execution_count":189}]}]}