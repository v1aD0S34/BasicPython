{"cells":[{"cell_type":"markdown","metadata":{"id":"hsOk4qrOGDZA"},"source":["# Функции"]},{"cell_type":"markdown","source":["## Базовый синтаксис"],"metadata":{"id":"JRyWnPk7XAf7"}},{"cell_type":"markdown","source":["Объявление функции в Python выглядит следующим образом:\n","\n","```python\n","def function_name(args):\n","    something()\n","    return something_else\n","```"],"metadata":{"id":"GYh3y1vHGZEz"}},{"cell_type":"markdown","source":["Примечание`return` может отсутствовать, тогда функция ничего не вернет, а точнее вернет ничего - `None`."],"metadata":{"id":"VHdc6JNJoTYz"}},{"cell_type":"markdown","source":["Создадим простейшую функцию, которая возвращать сумму двух ее аргументов:"],"metadata":{"id":"dsFxE1Y5G_ys"}},{"cell_type":"code","source":["def sum_of_two_args(a, b):\n","    summ = a + b\n","    print(f\"Function received {a=}, {b=}\")\n","    return summ"],"metadata":{"id":"-XV8_T_TG_Fj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Вызов функции - используем ее имя + указываем аргументы.\n","\n","Аргументы в функцию можно передавать двумя способами:"],"metadata":{"id":"kyoXw5sVKMg0"}},{"cell_type":"markdown","source":["- по позиции - просто перечисляем значения аргументов, в таком случае первый указанный при вызове функции аргумент будет соотнесен с первым указанным при объявлении функции аргументов:"],"metadata":{"id":"fkLywO326F6v"}},{"cell_type":"code","source":["sum_of_two_args(10, 19)  # при вызове функции в переменную a запишется 10, в b - 19"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BnEFc1yi6cfr","executionInfo":{"status":"ok","timestamp":1675159649897,"user_tz":-180,"elapsed":226,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1eab7b22-62fc-4fad-cd34-0474aae204d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Function received a=10, b=19\n"]},{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["- по ключу - необходимо явно указать какому аргументу мы хотим присвоить значение:"],"metadata":{"id":"OmWTtJKg6VwZ"}},{"cell_type":"code","source":["sum_of_two_args(b=19, a=10)  # необязательно перечислять аргументы в том же порядке"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sYhq3C4t7DHM","executionInfo":{"status":"ok","timestamp":1675159679282,"user_tz":-180,"elapsed":17,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"96e6cafc-7c29-4b06-aa3c-3617eef9be8b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Function received a=10, b=19\n"]},{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["Можно смешивать способы указания аргументов, например, `a` указать с помощью позиции, а `b` - с помощью ключ:"],"metadata":{"id":"wvWyHlwB7e2L"}},{"cell_type":"code","source":["sum_of_two_args(10, b=19)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aFqLEuzf7pOz","executionInfo":{"status":"ok","timestamp":1675159679513,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"e9f99ba6-7109-47e8-fac7-8ad5b3866fad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Function received a=10, b=19\n"]},{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["**Но** нужно помнить правило - сначала аргументы по позиции, затем по ключам:"],"metadata":{"id":"eqi1WUD4_WvW"}},{"cell_type":"code","source":["sum_of_two_args(b=19, 10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":133},"id":"60iEn-Ml_yTN","executionInfo":{"status":"error","timestamp":1675159693096,"user_tz":-180,"elapsed":221,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1ca6a97c-9e6f-4340-f9ff-0558d6c2481a"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-5-421b5307b5f1>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    sum_of_two_args(b=19, 10)\u001b[0m\n\u001b[0m                          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m positional argument follows keyword argument\n"]}]},{"cell_type":"code","source":["sum_of_two_args(19, a=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"BIgXh-GOAAet","executionInfo":{"status":"error","timestamp":1675159699791,"user_tz":-180,"elapsed":221,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1ba8976a-718f-46e2-9508-e588c99f9c6b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-a375e4782cd1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msum_of_two_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m19\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: sum_of_two_args() got multiple values for argument 'a'"]}]},{"cell_type":"code","source":["sum_of_two_args(a=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"Jwk_SdpJfkpS","executionInfo":{"status":"error","timestamp":1675159731889,"user_tz":-180,"elapsed":215,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ae3ff8f4-fa6c-4bc2-b344-e9ecd6869e27"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-e6c9cc0e19a7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msum_of_two_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: sum_of_two_args() missing 1 required positional argument: 'b'"]}]},{"cell_type":"markdown","source":["Если не указать скобки, но Python будет рассматривать функцию как объект (\"переменную\"):"],"metadata":{"id":"IEf8RgylMJzq"}},{"cell_type":"code","source":["sum_of_two_args"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IUc2T3EnMRSe","executionInfo":{"status":"ok","timestamp":1675159742956,"user_tz":-180,"elapsed":235,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"6e1a8d01-f393-4e20-e60a-684aa788a324"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.sum_of_two_args(a, b)>"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"nvzwXHfSHlhF"},"source":["## Аргументы по-умолчанию"]},{"cell_type":"markdown","source":["Для аргумента можно задать значение по-умолчанию. Тогда если при вызове функции не было передано значение, оно будет установлено по-умолчанию:"],"metadata":{"id":"L0FwMyuF59LB"}},{"cell_type":"code","source":["def sum_of_two_args_verbose(a, b, verbose=False):\n","    \"\"\"\n","    This function returns sum of two arguments\n","    \"\"\"\n","    summ = a + b\n","    if verbose:\n","        print(f\"Function received {a=}, {b=}\")\n","    return summ"],"metadata":{"id":"_vd85R0sQSSL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sum_of_two_args_verbose(10, 19)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ohuDp_2gQgLe","executionInfo":{"status":"ok","timestamp":1675159835082,"user_tz":-180,"elapsed":8,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"42159f7d-c6fd-47df-c063-d2f0fbdec51e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["sum_of_two_args_verbose(10, 19, verbose=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2_LMAgxUQj36","executionInfo":{"status":"ok","timestamp":1675159836677,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"51b14608-c083-4926-c4d6-02881bc2a5e3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Function received a=10, b=19\n"]},{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["sum_of_two_args_verbose(10, 19, True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jWBJGhF_gezT","executionInfo":{"status":"ok","timestamp":1675159839274,"user_tz":-180,"elapsed":9,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2a0a0e5f-cb1d-46f6-b743-3d2098f4d180"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Function received a=10, b=19\n"]},{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["sum_of_two_args_verbose(10, 19)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xt1NVCffhmAl","executionInfo":{"status":"ok","timestamp":1663000017270,"user_tz":-180,"elapsed":865,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"7916a3ba-6420-4d01-fc1d-679af474ba29"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["29"]},"metadata":{},"execution_count":102}]},{"cell_type":"markdown","source":["Как было сказано ранее, функция по-умолчанию принимает любые типы данных, поэтому можем передать в нашу функцию и `str`:"],"metadata":{"id":"4H9Kjb5IRNBg"}},{"cell_type":"code","source":["sum_of_two_args_verbose('10', \"19\", verbose=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"aOtoFGZuRUM9","executionInfo":{"status":"ok","timestamp":1675159888677,"user_tz":-180,"elapsed":214,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"4f84fb2c-6926-4e42-9411-6664e3ddbaa3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1019'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"IKDwRA3MTroc"},"source":["## Возвращаемое значение"]},{"cell_type":"markdown","source":["Как было сказано ранее, функция в Python может ничего не возвращать, если в теле функции отсутствует команда `return`:"],"metadata":{"id":"dc-p9mPNRIl9"}},{"cell_type":"code","metadata":{"id":"ZdoyJMAw34yE"},"source":["def sum_of_two_args_none(a, b):\n","    summ = a + b\n","    print(\"Result:\", summ)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result = sum_of_two_args_none(15, 10)\n","print(result, type(result))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VJzlMsr7RmSO","executionInfo":{"status":"ok","timestamp":1675159919991,"user_tz":-180,"elapsed":12,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"661d7a7e-a24d-48ff-c59c-b838f7c9e298"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Result: 25\n","None <class 'NoneType'>\n"]}]},{"cell_type":"markdown","source":["В других языках программирования такие функции, которые ничего не возвращают, называют процедурам, но в Python такого разделения нет."],"metadata":{"id":"w_F0vZHwSIlY"}},{"cell_type":"markdown","source":["Функции в Python могут возвращать и несколько значений:"],"metadata":{"id":"HmjXLxXmSV5v"}},{"cell_type":"code","source":["def sum_of_three_args(a, b, c):\n","    return a + b, b + c, a + c\n","    #return (a + b, b + c, a + c)"],"metadata":{"id":"QfR6o41-SeGT"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I-5KEP6a6kJI","executionInfo":{"status":"ok","timestamp":1663000152300,"user_tz":-180,"elapsed":387,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5c625af8-f694-4127-a22d-314faa3ed5ed"},"source":["result1, result2, result3 = sum_of_three_args(10, 20, 30)\n","print(result1, result2, result3)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["30 50 40\n"]}]},{"cell_type":"markdown","source":["По сути такая функция возвращает кортеж из нескольких элементов, а затем мы выполняем операцию множественного присовения. Проверим:"],"metadata":{"id":"Ck2GJPY0Sv_B"}},{"cell_type":"code","source":["result = sum_of_three_args(10, 20, 30)\n","print(result, type(result))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"duKq-YIkS7Lf","executionInfo":{"status":"ok","timestamp":1675160008128,"user_tz":-180,"elapsed":282,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d0d00a0b-625a-4210-bdc5-e488f3f91ec3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(30, 50, 40) <class 'tuple'>\n"]}]},{"cell_type":"markdown","source":["Как только внутри функции выполняется операция `return`, выполнение функции полностью прекращается:"],"metadata":{"id":"UHOKDwqssJGW"}},{"cell_type":"code","source":["def sum_of_three_args_multi_return(a, b, c):\n","    print(\"Before 1st return\")\n","    return a + b, b + c, a + c\n","    print(\"Before 2nd return\")\n","    return 2*(a + b), 2*(b + c), 2*(a + c)"],"metadata":{"id":"gAGjXoKkirj5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sum_of_three_args_multi_return(1, 2, 3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"imCaKzbXi4SP","executionInfo":{"status":"ok","timestamp":1675160051622,"user_tz":-180,"elapsed":11,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"85ddf5d2-6ef4-4e87-866f-0a91b9698520"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before 1st return\n"]},{"output_type":"execute_result","data":{"text/plain":["(3, 5, 4)"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["При этом вы можете указать внутри функции несколько `return` следующим образом:"],"metadata":{"id":"U6K7YMUEsVnZ"}},{"cell_type":"code","source":["def sum_of_three_args_condition(a, b, c):\n","    if a > b:\n","        print(\"Before 1st return\")\n","        return a + b, b + c, a + c\n","    else:\n","        print(\"Before 2nd return\")\n","        return 2*(a + b), 2*(b + c), 2*(a + c)"],"metadata":{"id":"B1aDIxUyjDxG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sum_of_three_args_condition(3, 2, 3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mncX6dUCjMU_","executionInfo":{"status":"ok","timestamp":1675160119776,"user_tz":-180,"elapsed":217,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"fc305668-93e8-403c-8bca-8588dfd8e1ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before 1st return\n"]},{"output_type":"execute_result","data":{"text/plain":["(5, 5, 6)"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["Функцию выше можно переписать без `else`:"],"metadata":{"id":"K4eiVO1PsfQu"}},{"cell_type":"code","source":["def sum_of_three_args_condition_alter(a, b, c):\n","    if a > b:\n","        print(\"Before 1st return\")\n","        return [a + b, b + c, a + c]\n","    print(\"Before 2nd return\")\n","    return 2*(a + b), 2*(b + c), 2*(a + c)"],"metadata":{"id":"9raoGc8_jXke"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sum_of_three_args_condition_alter(3, 2, 3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4rv34-GGjdzL","executionInfo":{"status":"ok","timestamp":1663000722684,"user_tz":-180,"elapsed":5,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"3030488f-6b9a-48aa-bbf1-1d9822b9a2dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before 1st return\n"]}]},{"cell_type":"markdown","source":["## Способ передачи аргументов"],"metadata":{"id":"1OGujE1YXGnL"}},{"cell_type":"markdown","metadata":{"id":"A0GM_rjQGDZD"},"source":["Правило передачи аргументов в функцию:\n","\n",">- Изменяемые аргументы передаются по ссылке\n",">- Неизменяемые аргументы передаются по значению"]},{"cell_type":"markdown","source":["Рассмотрим пример. Функция принимает 2 аргумента - словарь `team` (изменяемый аргумент) и целое число `number` (неизменяемый аргумент). Функция изменяем оба аргумента внутри себя:"],"metadata":{"id":"gPMi4Fh0qecA"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"bO7yrqhkGDZD"},"outputs":[],"source":["def get_my_hero_team(team, number):\n","    number = 10\n","    team['Chuck'] = 'Norris'\n","    team['Sylvester'] = 'Stallone'"]},{"cell_type":"markdown","source":["Посмотрим что произойдет с нашими переменными снаружи функции. Поменяются ли они при вызове функции?"],"metadata":{"id":"SByPFEzErOtg"}},{"cell_type":"code","source":["number = 5\n","hero_team = {'Bruce': 'Willis', 'Chuck': 'Lorre'}\n","get_my_hero_team(hero_team, number)"],"metadata":{"id":"TripdWpiYywD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Переменная `number` не изменила свое значение:"],"metadata":{"id":"8Tn4bcUMraPP"}},{"cell_type":"code","source":["number"],"metadata":{"id":"LEJn4r3qY0Up","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675160595614,"user_tz":-180,"elapsed":232,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d4021a99-1832-4226-90e1-44685541e6b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","source":["Переменная `hero_team` значение поменяла:"],"metadata":{"id":"aFauwSAmri8V"}},{"cell_type":"code","source":["hero_team"],"metadata":{"id":"pCsjz_TsY1oI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675160605662,"user_tz":-180,"elapsed":939,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d86ef93e-39c5-42be-aa57-472ae73f460c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Bruce': 'Willis', 'Chuck': 'Norris', 'Sylvester': 'Stallone'}"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"BB5SjGcMHlhH"},"source":["## Переменное число аргументов"]},{"cell_type":"markdown","source":["Функции в Python могут принимать при вызове не только фиксированное, но и переменное число элементов."],"metadata":{"id":"l0u068keUMIS"}},{"cell_type":"markdown","source":["Для этого используется **операторы распаковки** `*` и `**`, которые распаковывают список / кортеж и словарь. Продемонстрируем это на примере:"],"metadata":{"id":"nCNrvzGmUY8g"}},{"cell_type":"code","source":["test_list = ['1', 1, False, [3], -5+1j]\n","\n","print(test_list)\n","\n","print(*test_list)\n","print(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ooa01u8_UtZB","executionInfo":{"status":"ok","timestamp":1675160860874,"user_tz":-180,"elapsed":210,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5494c43d-4876-4be5-d519-4a7e0e1bb445"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['1', 1, False, [3], (-5+1j)]\n","1 1 False [3] (-5+1j)\n","1 1 False [3] (-5+1j)\n"]}]},{"cell_type":"markdown","source":["Т.е. оператор распаковки `*` преобразует список / кортеж в набор позиционных аргументов.\n","\n","Оператор распаковки `**` действует аналогично для словаря, но преобразует его в набор ключевых аргументов."],"metadata":{"id":"tMs2hmBIVAq-"}},{"cell_type":"code","source":["test_dict = {\"sep\": \"\\n\", 'end': 'END OF PRINT'}\n","\n","print(\"Hello, world!\", \"This is my first program!\", **test_dict)\n","\n","print()\n","print(\"Hello, world!\", \"This is my first program!\", sep=\"\\n\", end='END OF PRINT')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hny0sj2UVXJe","executionInfo":{"status":"ok","timestamp":1675160905503,"user_tz":-180,"elapsed":255,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9aac7b37-74d8-4cfb-95b5-83ce68107724"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, world!\n","This is my first program!END OF PRINT\n","Hello, world!\n","This is my first program!END OF PRINT"]}]},{"cell_type":"markdown","source":["Оператор распаковки также применяют, когда количество возвращаемых переменных функцией неизвестно или переменно:"],"metadata":{"id":"DpdpAJX6V1Hj"}},{"cell_type":"code","source":["def echo(input_list):\n","    return input_list"],"metadata":{"id":"QNQ-s75VV9JB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_list = [1, 1, 2, 3, 5, 8, 13]\n","print(echo(test_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yN7UW8fsWCEY","executionInfo":{"status":"ok","timestamp":1675160997121,"user_tz":-180,"elapsed":16,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9f225f99-2a50-4b13-d988-4b229158f604"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 1, 2, 3, 5, 8, 13]\n"]}]},{"cell_type":"code","source":["result_first, result_second, *result_other = echo(test_list)\n","print(result_first, result_second, result_other)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_drFhCZ1WKtE","executionInfo":{"status":"ok","timestamp":1675161030126,"user_tz":-180,"elapsed":225,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5e757fd9-3c51-48d1-ef5b-01a54e60c2c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 1 [2, 3, 5, 8, 13]\n"]}]},{"cell_type":"markdown","source":["В `result_other` может попасть и 0 переменных:"],"metadata":{"id":"SppmeK5YWXfY"}},{"cell_type":"code","source":["test_list_shorter = test_list[:2]\n","\n","result_first, *result_other = echo(test_list_shorter)\n","print(result_first, result_other)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T65D10ZOWcek","executionInfo":{"status":"ok","timestamp":1675161071872,"user_tz":-180,"elapsed":222,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"51b7cb48-01b1-429d-df83-cbca9653c2c3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 [1]\n"]}]},{"cell_type":"markdown","source":["Однако, остальные переменные обязательно должны быть заполнены:"],"metadata":{"id":"YpePbrmuWnW8"}},{"cell_type":"code","source":["test_list_shortest = test_list[:1]\n","\n","result_first, result_second, *result_other = echo(test_list_shortest)\n","print(result_first, result_second, result_other)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":220},"id":"q5XnzoKaWlx6","executionInfo":{"status":"error","timestamp":1675161075786,"user_tz":-180,"elapsed":215,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9010e751-39ec-4057-8c35-15a99ea68d27"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-065d6ea47d63>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtest_list_shortest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mresult_first\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_second\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mresult_other\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mecho\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_list_shortest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_first\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_second\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_other\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: not enough values to unpack (expected at least 2, got 1)"]}]},{"cell_type":"markdown","source":["Операторы распаковки можно использовать и при объявлении функции, чтобы она могла принимать произвольное количество аргументов\n","\n","Рассмотрим пример оператора `*` и позиционных аргументов:"],"metadata":{"id":"yhEetvlaVrNR"}},{"cell_type":"code","metadata":{"id":"bUcVxKYfql4m"},"source":["def sum_many(*custom):\n","    print(\"Input elements:\", custom, type(custom))\n","    if len(custom) > 0:\n","        print(\"First element:\", custom[0])\n","    return sum(custom)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wv8mwOP9HlhJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675161166475,"user_tz":-180,"elapsed":219,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"b07362df-bff6-408b-f979-b1cca4323968"},"source":["sum_many(1, 2, 3)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input elements: (1, 2, 3) <class 'tuple'>\n","First element: 1\n"]},{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["sum_many(1, 2, 3, 4, 5, 6, 7, 8)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2TIVR9o5XB9W","executionInfo":{"status":"ok","timestamp":1675161179407,"user_tz":-180,"elapsed":216,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"55dccff0-32f5-4511-b9fd-e9270ae1e3bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input elements: (1, 2, 3, 4, 5, 6, 7, 8) <class 'tuple'>\n","First element: 1\n"]},{"output_type":"execute_result","data":{"text/plain":["36"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["sum_many()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c-BxVt1TXEcZ","executionInfo":{"status":"ok","timestamp":1675161185812,"user_tz":-180,"elapsed":214,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"99bbf13e-0ff5-4caa-bc6f-f481ae0e667c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input elements: () <class 'tuple'>\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","source":["Аналогично и для оператора `**` и ключевых аргументов:"],"metadata":{"id":"VtNSc8JHXQLn"}},{"cell_type":"code","source":["def print_keyword_args(**kwargs):\n","    print(\"Input kwargs:\", kwargs)\n","    print(\"Answer:\", kwargs.get(\"answer\", \"Not Found\"))"],"metadata":{"id":"YHgrjI4BXWBL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print_keyword_args(a=1, b=[2], answer=42)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mvN_-NRRXoG4","executionInfo":{"status":"ok","timestamp":1675161239946,"user_tz":-180,"elapsed":242,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c4b56ab2-71c8-4f11-97bc-22d6e2caf9dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input kwargs: {'a': 1, 'b': [2], 'answer': 42}\n","Answer: 42\n"]}]},{"cell_type":"code","source":["print_keyword_args(a=1, b=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ac8zKuRIX-xg","executionInfo":{"status":"ok","timestamp":1675161258528,"user_tz":-180,"elapsed":241,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a3da02f3-c766-457f-8f00-5701e7a40b4b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input kwargs: {'a': 1, 'b': 2}\n","Answer: Not Found\n"]}]},{"cell_type":"markdown","source":["Таким образом, можем объявить функцию, которая принимает любое количество любых аргументов:"],"metadata":{"id":"8vs1AHt2YG23"}},{"cell_type":"code","metadata":{"id":"Sh8RHFC1HlhK"},"source":["def uberfunc(*args, **kwargs):\n","    print('args =', args, 'kwargs =', kwargs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["uberfunc()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X-re2qxKYPhf","executionInfo":{"status":"ok","timestamp":1675161310254,"user_tz":-180,"elapsed":614,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"a0eac334-14c8-4fb6-fe67-71c3b6e054c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["args = () kwargs = {}\n"]}]},{"cell_type":"code","source":["uberfunc(1, 2, 3, a=4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZfTIUH0cYW17","executionInfo":{"status":"ok","timestamp":1675161310591,"user_tz":-180,"elapsed":28,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"740a44da-5c21-4e2a-a1d4-d2df1acb9ff2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["args = (1, 2, 3) kwargs = {'a': 4}\n"]}]},{"cell_type":"code","source":["uberfunc(answer=42)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pri1Yo8qYagl","executionInfo":{"status":"ok","timestamp":1675161310595,"user_tz":-180,"elapsed":27,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"81d0c6d6-f4f8-40be-cee6-b6ffec93a7fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["args = () kwargs = {'answer': 42}\n"]}]},{"cell_type":"markdown","source":["**В итоге порядок объявления аргументов при создании функции выглядит следующим образом:**"],"metadata":{"id":"R0ALY6BOYhxv"}},{"cell_type":"markdown","source":["`def foo([positional_args, [positional_args_with_default, [*pos_args_name, [keyword_only_args, [**kw_args_name]]]]])`"],"metadata":{"id":"HG3FbzykYzYL"}},{"cell_type":"code","metadata":{"id":"mP7VvRHLZ02U"},"source":["def foo(a, b=10, *args, c, d=10, **kwargs):\n","    print(args)\n","    print(sum(kwargs.values()))\n","    return a + b + sum(args) + c + d + sum(kwargs.values())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4jfuHUCkxkzc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675161480244,"user_tz":-180,"elapsed":317,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2caef5be-6002-4606-bb52-2451a7ddc280"},"source":["arg1, arg2 = 10, 10\n","result = foo(10, 20, arg1, arg2, c=10, arg3=10, arg4=10)\n","print(f'result = {result}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 10)\n","20\n","result = 90\n"]}]},{"cell_type":"code","metadata":{"id":"eF0GjFKnmdUY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675161507485,"user_tz":-180,"elapsed":240,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"034cdd29-7e55-4d59-b817-cf9dac0d2712"},"source":["result = foo(10, arg1, arg2, c=10, arg3=10, arg4=10)\n","print(f'result = {result}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(10,)\n","20\n","result = 70\n"]}]},{"cell_type":"code","source":["result = foo(10, c=10, arg3=10, arg4=10)\n","print(f'result = {result}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BCsTe2flsPIQ","executionInfo":{"status":"ok","timestamp":1675161510605,"user_tz":-180,"elapsed":220,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"67d9a47f-dbd3-43d2-cd2c-697af8cdd108"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["()\n","20\n","result = 60\n"]}]},{"cell_type":"code","source":["sample_dct = {'arg3': 25, 'arg4': 25, 'd': 25}\n","result = foo(10, arg1, arg2, c=10, **sample_dct)\n","print(f'result = {result}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MdVY0QiyslUG","executionInfo":{"status":"ok","timestamp":1663002955712,"user_tz":-180,"elapsed":246,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ed85d2d9-29ec-42a5-c6c7-8fd617ec91dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(10,)\n","50\n","result = 115\n"]}]},{"cell_type":"markdown","metadata":{"id":"oB8vpUQ0tKK7"},"source":["[Звездочки в питоне - как они используются](https://tproger.ru/translations/asterisks-in-python-what-they-are-and-how-to-use-them/)"]},{"cell_type":"markdown","metadata":{"id":"vj3iH5ORGDZG"},"source":["## Рекурсия"]},{"cell_type":"markdown","source":["Внутри функции можно вызывать ее саму, тем самым получая рекурсию:"],"metadata":{"id":"87GniuoqZqzE"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"pCRZstL-GDZG"},"outputs":[],"source":["def easy_sort(x: list) -> list:\n","    \"\"\"\n","    Function sort list\n","    \"\"\"\n","    if not x:  # if not bool(x): if len(x) == 0:\n","        return x\n","\n","    first = min(x)\n","    x.remove(first)\n","    print(f\"{first=}, {x=}\")\n","\n","    return [first] + easy_sort(x)"]},{"cell_type":"code","source":["easy_sort([4, 2, 3, 1, 7, 5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qyUOCRNibY3D","executionInfo":{"status":"ok","timestamp":1675162167661,"user_tz":-180,"elapsed":210,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"8c6998d1-25d1-409b-b418-d554d5529f68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["first=1, x=[4, 2, 3, 7, 5]\n","first=2, x=[4, 3, 7, 5]\n","first=3, x=[4, 7, 5]\n","first=4, x=[7, 5]\n","first=5, x=[7]\n","first=7, x=[]\n"]},{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4, 5, 7]"]},"metadata":{},"execution_count":70}]},{"cell_type":"markdown","source":["pydantic"],"metadata":{"id":"UEl9VS0DjdVJ"}},{"cell_type":"code","source":["help(easy_sort)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4zEmjewcjVE5","executionInfo":{"status":"ok","timestamp":1675162333608,"user_tz":-180,"elapsed":222,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"16062ffb-9953-4836-f91f-32c8d186ce30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on function easy_sort in module __main__:\n","\n","easy_sort(x: list) -> list\n","    Function sort list\n","\n"]}]},{"cell_type":"markdown","source":["Функция называется **рекурсивной**, если в ходе своего исполнения она вызывает саму себя."],"metadata":{"id":"OP1ftt4YZlmU"}},{"cell_type":"markdown","source":["`n! = 1 * 2 * 3 * ... * n`"],"metadata":{"id":"IH_yBCWixFjC"}},{"cell_type":"markdown","source":["`factorial(n) = n * factorial(n-1)`"],"metadata":{"id":"JSXct6qbxYia"}},{"cell_type":"markdown","source":["Рассмотрим рекурсию на примере одного из простейших алгоритмов сортировки.\n","\n","Общая идея алгоритма:\n","1. Текущий список = входной список\n","2. Найти минимальный элемент в текущем списке\n","3. Удалить минимальный элемент из текущего списка, получим новый список\n","4. Повторить п. 2-3 для нового списка, тогда `sorted_input_list = [min_elem] + sorted_current_list`"],"metadata":{"id":"DG0N1qRcaKn8"}},{"cell_type":"code","metadata":{"id":"JAuR_ofnHlhK"},"source":["def easy_sort(x):\n","    if len(x) == 1:\n","        return x  # при вызове return функция возвращает значение и ее выполнение завершается\n","    first = min(x)\n","    x.remove(first)\n","    print(\"Min:\", first, \"rest:\", x)\n","    result = [first] + easy_sort(x)\n","    print(\"Result:\", result)\n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Проверим его работу:"],"metadata":{"id":"DxP7aSdlvQvh"}},{"cell_type":"code","source":["easy_sort([4, 2, 3, 1, 7, 5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hS5rD7LUvYt2","executionInfo":{"status":"ok","timestamp":1675162439419,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"eedacb4b-3b4d-4dad-bad7-c9774081e441"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Min: 1 rest: [4, 2, 3, 7, 5]\n","Min: 2 rest: [4, 3, 7, 5]\n","Min: 3 rest: [4, 7, 5]\n","Min: 4 rest: [7, 5]\n","Min: 5 rest: [7]\n","Result: [5, 7]\n","Result: [4, 5, 7]\n","Result: [3, 4, 5, 7]\n","Result: [2, 3, 4, 5, 7]\n","Result: [1, 2, 3, 4, 5, 7]\n"]},{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4, 5, 7]"]},"metadata":{},"execution_count":76}]},{"cell_type":"markdown","source":["Важным моментом любой рекурсивной функции является условие остановки - иначе функция будет бесконечно вызывать саму себя."],"metadata":{"id":"GnTm_ZncZ9bu"}},{"cell_type":"markdown","source":["**Как работает рекурсия?**\n","\n","Перед новым вызовом функции Python запоминает текущее состояние предыдущего (родительского) вызова и помещает его в стек вызовов в память компьютера.\n","\n","В этом и заключается опасность рекурсии - память ограничена, поэтому и глубина рекурсии (сколько функций внутри функций внутри функций... можно вызвать)."],"metadata":{"id":"Rj8d6dznvs8s"}},{"cell_type":"markdown","source":["##### **Примечание для смешариков - максимальная глубина рекурсии в Python и как это обойти**"],"metadata":{"id":"ZH3A4fKpxAOh"}},{"cell_type":"markdown","source":["В Python имеется жесткий лимит на глубину рекурсии во избежании заполнения памяти:"],"metadata":{"id":"fNn20WSWwFJG"}},{"cell_type":"code","metadata":{"id":"52zFvrR8uUDD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663004707744,"user_tz":-180,"elapsed":282,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2e4edcdf-7703-4479-dc50-1f8eeb95a425"},"source":["import sys\n","sys.getrecursionlimit()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1000"]},"metadata":{},"execution_count":205}]},{"cell_type":"markdown","source":["Этот лимит можно обойти с помощью:"],"metadata":{"id":"j7S8-6bhwmC1"}},{"cell_type":"code","source":["sys.setrecursionlimit(1_000_000)"],"metadata":{"id":"JRFcGM2vwp7Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["но так делать не рекомендуется!\n","\n","Данный лимит существует именно таким маленьким, чтобы ваша программа упала намного раньше, чем у вас закончится оперативная память и кроме вашей программы начнут падать и остальные расположенные на том же компьютере"],"metadata":{"id":"cjoLdxrNwuX7"}},{"cell_type":"markdown","source":["По этой причине рекомендуется по возможности заменить рекурсивные функции на содержащие внутри себя циклы:"],"metadata":{"id":"jzi25oWazvVM"}},{"cell_type":"code","source":["def easy_sort_nonrec(x):\n","    result = []\n","    while len(x) > 0:\n","        first = min(x)\n","        result.append(first)\n","        x.remove(first)\n","\n","    return result"],"metadata":{"id":"OU0Cra8Rzunp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["easy_sort_nonrec([4, 2, 3, 1, 7, 5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"308EyzjW0Pvv","executionInfo":{"status":"ok","timestamp":1663004939420,"user_tz":-180,"elapsed":7,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c7d78be2-846d-4ef1-a9e4-900c7bc1bbfa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4, 5, 7]"]},"metadata":{},"execution_count":211}]},{"cell_type":"markdown","metadata":{"id":"4EnFZjOqHlhR"},"source":["## Анонимные функции"]},{"cell_type":"markdown","source":["**Анонимная функция** - особый вид функций, которые объявляются в месте использования и не получают уникального идентификатора (имени) для доступа к ним."],"metadata":{"id":"Urx5cHDFx-HI"}},{"cell_type":"markdown","source":["Реализована в Python как **лямбда-функция**. Лямбда-функция может принимать любое кол-во аргументов, но имеет только одно выражение, которое и возвращает при вызове."],"metadata":{"id":"a9T086F3yTio"}},{"cell_type":"markdown","source":["Основной синтаксис лямбда-функции выглядит следующим образом:\n","\n","```python\n","lambda x: command()\n","```"],"metadata":{"id":"3_jWYIsMzbjo"}},{"cell_type":"markdown","source":["Помимо отсутствия имени, отличительной чертой лямбда-функции является то, что она содержит в себе только одно выражение, которое и будет возвращать при вызове."],"metadata":{"id":"mZTtdYc3Ep2t"}},{"cell_type":"markdown","source":["Создадим анонимную функцию и запишем ее в переменную:"],"metadata":{"id":"L1d4BUVtqsqe"}},{"cell_type":"code","source":["f_lambda = lambda x: print(x, end='EOL')"],"metadata":{"id":"YjPCJ0MHq6Ip"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Проверим, что мы действительно создали функцию:"],"metadata":{"id":"2Pc2WMgkrNVc"}},{"cell_type":"code","source":["type(f_lambda)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NEP033u1rM4m","executionInfo":{"status":"ok","timestamp":1675163008429,"user_tz":-180,"elapsed":352,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"488f1712-b8bf-4d21-aa62-ee4386498afa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["function"]},"metadata":{},"execution_count":78}]},{"cell_type":"markdown","source":["Проверим как работает наша лямбда-функция:"],"metadata":{"id":"N3L3-WbGrZJy"}},{"cell_type":"code","source":["f_lambda(\"Hello!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_0PM4aserdwT","executionInfo":{"status":"ok","timestamp":1675163019569,"user_tz":-180,"elapsed":303,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"2493a20d-c47e-49a5-c97c-55edfa6eb641"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello!EOL"]}]},{"cell_type":"markdown","source":["Записав нашу лямбда-функцию в переменную мы ей как бы дали имя, на практике так не делают - это лишь демонстрация."],"metadata":{"id":"dFsPcHppq6bZ"}},{"cell_type":"markdown","source":["Созданная нами функция полностью эквивалентна следующей обычной (именованной) функции:"],"metadata":{"id":"qKjc-KEIrEDa"}},{"cell_type":"code","metadata":{"id":"INpcKkYgHlhR"},"source":["def f(x):\n","    return print(x, end='EOL')"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f(\"Hello!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"apvpv1ERrzpe","executionInfo":{"status":"ok","timestamp":1675163053868,"user_tz":-180,"elapsed":10,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"5eef9325-28e0-48c0-b4a5-8eadedc34b74"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello!EOL"]}]},{"cell_type":"markdown","source":["Как и обычная функция, лямбда-функция может принимать на вход несколько аргументов, указывать значения по-умолчанию:"],"metadata":{"id":"BpLetvDvsJ4g"}},{"cell_type":"code","source":["(lambda x, y=4: x + y)(10, 13000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O0CR6LbjsTyv","executionInfo":{"status":"ok","timestamp":1675163092545,"user_tz":-180,"elapsed":301,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"c939548d-79cb-4b1a-fc02-42765ef2403f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["13010"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["(lambda x, y=4: x + y)(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2mQXsid1wyz0","executionInfo":{"status":"ok","timestamp":1675163092784,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"1f398747-e899-4172-8ff5-d9b7d1c54b81"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["14"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["(lambda x, y=4, *args: x + y + sum(args))(10, 13000, 4, 100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kmJiqSlQw0xt","executionInfo":{"status":"ok","timestamp":1675163103796,"user_tz":-180,"elapsed":216,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"48e8ded9-78ae-4f01-8238-ab1e56a74854"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["13114"]},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","source":["В примерах выше мы сразу создали и вызвали лямбда-функцию."],"metadata":{"id":"HzS9lE34sTOr"}},{"cell_type":"markdown","source":["### Применения лямбда-функций"],"metadata":{"id":"LY-n6bMWxrlt"}},{"cell_type":"markdown","source":["**Зачем нужны лямбда-функции?** Некоторые функции принимают в качестве аргумента не обычную переменную, например, числовую или строку, а другую функцию. Эта переданная функция-аргумент используется для каких-либо вычислений внутри и обычно является достаточно простой."],"metadata":{"id":"vHSJFdnvxvEF"}},{"cell_type":"markdown","source":["Ярким примером такой функции является функция `sorted`. Она используется для сортировки контейнеров по возрастанию и по умолчанию для этого она сравнивает элементы контейнера между собой."],"metadata":{"id":"0p69m9zWypeW"}},{"cell_type":"code","source":["test_list = [3, 14, 15, 2, 73]"],"metadata":{"id":"1qpp_q82Bk4q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sorted(test_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9r3cJ3osBttC","executionInfo":{"status":"ok","timestamp":1675163205560,"user_tz":-180,"elapsed":512,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"ff875a16-2f51-4217-c7bf-2f42c4892444"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 3, 14, 15, 73]"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["Иногда в качестве элементов нашего сортируемого контейнера используются других контейнеры, например, кортежи и списки. Часто в таких случаях мы хотим выполнить нестандартную лексикографическую сортировку, а, например, сортировку по какому-либо конкретному индексу контейнера-элемента."],"metadata":{"id":"rTp4TnH0y6gv"}},{"cell_type":"markdown","source":["Разберем это на примере. Пусть имеем список `customer_data`, который содержит пары элементов (кортеж из двух элементов) \"имя клиента\", \"полученный доход\"."],"metadata":{"id":"fntXa5bNzS73"}},{"cell_type":"code","source":["customer_data = [(\"ivan\", 2), (\"george\", 4), (\"carl\", 1), (\"liz\", 20), (\"vlad\", 10)]"],"metadata":{"id":"GKj7ZLRTB4DA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Попробуем отсортировать этот список стандартным способом:"],"metadata":{"id":"8Iht36M6zwkR"}},{"cell_type":"code","source":["sorted(customer_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Er2X9TGCQ9h","executionInfo":{"status":"ok","timestamp":1675163260693,"user_tz":-180,"elapsed":213,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"d99bdc03-2823-4ab6-aad8-7c32cd00f84b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('carl', 1), ('george', 4), ('ivan', 2), ('liz', 20), ('vlad', 10)]"]},"metadata":{},"execution_count":88}]},{"cell_type":"markdown","source":["Сортировка выполнилась в первую очередь по первому полю (как и полагается лексикографически). Но нам бы хотелось отсортировать список по доходу с клиентов.\n","\n","Здесь нам поможет один из необязательных аргументов функции `sorted` - `key`. Он принимает на вход функцию (не путать со значением/результатом функции), которая принимает один аргумент - элемент списка, и возвращает одно значение, по которому и будет выполняться сортировка."],"metadata":{"id":"XHZ9z-Fw1HPy"}},{"cell_type":"markdown","source":["В таких случаях, когда функция используется лишь один раз для небольшой работы, и применяют лямбда-функции. Выполним сортировку с использованием аргумента `key`:"],"metadata":{"id":"TFiWP0Yk1zIX"}},{"cell_type":"code","source":["sorted(customer_data, key=lambda x: x[1])  # сортируем по элементу с индексом 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x8sJL0PoCh0k","executionInfo":{"status":"ok","timestamp":1675163363094,"user_tz":-180,"elapsed":234,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"069ac9cc-4594-48cc-8244-0ed4339ac771"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('carl', 1), ('ivan', 2), ('george', 4), ('vlad', 10), ('liz', 20)]"]},"metadata":{},"execution_count":89}]},{"cell_type":"markdown","source":["Это эквивалентно созданию именованной функции и ее указания в аргументах:"],"metadata":{"id":"leRxR5B439A0"}},{"cell_type":"code","source":["def lambda_f(x):\n","    return x[1]"],"metadata":{"id":"VWOFRRm34FXI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sorted(customer_data, key=lambda_f)  # указываем имя функции, не вызывая ее"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pjtJpsb74RaH","executionInfo":{"status":"ok","timestamp":1675163392581,"user_tz":-180,"elapsed":12,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"07ff50f4-572d-4b2d-aac3-b3f8d879f2d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('carl', 1), ('ivan', 2), ('george', 4), ('vlad', 10), ('liz', 20)]"]},"metadata":{},"execution_count":91}]},{"cell_type":"markdown","source":["Как видим, получили сортировку по элементу с индексом 1, но хотелось бы иметь сортировку по убыванию. Здесь нам может помочь другой аргумент - `reverse`, который позволяет выполнить сортировку по убыванию (в обратном порядке)."],"metadata":{"id":"P7Y8GYWK2eF6"}},{"cell_type":"code","source":["sorted(customer_data, key=lambda x: x[1], reverse=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e9N4g3tiC7RG","executionInfo":{"status":"ok","timestamp":1663089701075,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"83b4e5ff-ab77-4f6d-c640-b479686768bf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('liz', 20), ('vlad', 10), ('george', 4), ('ivan', 2), ('carl', 1)]"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["Еще один способ выполнить сортировку по полю 1 по убыванию - изменить нашу лямбда-фукнцию:"],"metadata":{"id":"A3wByLc83vg6"}},{"cell_type":"code","source":["sorted(customer_data, key=lambda x: -x[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LUv-_iQ_DDV1","executionInfo":{"status":"ok","timestamp":1663089742282,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"891b558c-829e-4e75-dd18-0ed041983710"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('liz', 20), ('vlad', 10), ('george', 4), ('ivan', 2), ('carl', 1)]"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["Аналогично можно использовать и встроенные функции. Например, если хотим отсортировать список кортежей по минимальному элементу каждого кортежа:"],"metadata":{"id":"ybkeOPZ94c-X"}},{"cell_type":"code","source":["list_of_tuples = [(10, 2), (100, 4), (-13, -1), (42, 20)]"],"metadata":{"id":"bswka_yoF8UW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sorted(list_of_tuples, key=min)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t_Hdoe7yGBvA","executionInfo":{"status":"ok","timestamp":1663089949092,"user_tz":-180,"elapsed":761,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"9fc5c7c1-4db1-4b15-9390-68b2a47a2930"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(-13, -1), (10, 2), (100, 4), (42, 20)]"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["Еще одним примером встроенной функции, которая в качестве аргументов принимает другую функцию, является функция `map`."],"metadata":{"id":"31Uf03XS5Sbs"}},{"cell_type":"markdown","source":["Функция `map` позволяет применить одну функцию ко всем элементам контейнера:"],"metadata":{"id":"F7Bm_yJ-Dh-c"}},{"cell_type":"code","metadata":{"id":"98y1K-7RHlhR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663091010659,"user_tz":-180,"elapsed":408,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"956874bd-3b86-49ed-da6f-5715abc1726e"},"source":["list(map(lambda x: x ** 2, [1, 2, 3]))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 4, 9]"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["Функция `map` возвращает результат в специальном служебном типе данных, поэтому преобразуем его в список."],"metadata":{"id":"2n3POXtN8wd3"}},{"cell_type":"markdown","source":["Один из частых сценариев применения функции `map` - считывание набора чисел, вводимых из строки."],"metadata":{"id":"56i-cMjj9b-5"}},{"cell_type":"markdown","source":["Предположим, мы считали строку в переменную `input_str`:"],"metadata":{"id":"vxmGaW7wAI9J"}},{"cell_type":"code","source":["input_str = \"123 456 123778 8898\""],"metadata":{"id":"IvnoKIRgBJ84"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Затем можем разбить строку эту строку на отдельные элементы по пробелу:"],"metadata":{"id":"79lk7aUZBKVh"}},{"cell_type":"code","source":["input_str_list = input_str.split(' ')\n","input_str_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d6Ax6jCpD7Wk","executionInfo":{"status":"ok","timestamp":1663092219552,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"38a01103-a990-472a-9c2e-82f9a790a62b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['123', '456', '123778', '8898']"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["Остается лишь преобразовать элементы из строкового типа в целочисленный:"],"metadata":{"id":"uVr5Bt1RBV2F"}},{"cell_type":"code","source":["list(map(int, input_str_list))"],"metadata":{"id":"Jkv3QiKVFcke","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663092246224,"user_tz":-180,"elapsed":825,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"83460697-1ef7-4a6d-9917-8d6078b3bec4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[123, 456, 123778, 8898]"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","source":["Эта операция эквивалентна:"],"metadata":{"id":"Bg_D-R_NBdbm"}},{"cell_type":"code","source":["result = []\n","for item in input_str_list:\n","    result.append(int(item))\n","result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9spCcDcYEP39","executionInfo":{"status":"ok","timestamp":1663092888567,"user_tz":-180,"elapsed":3,"user":{"displayName":"Nikita Chestnov","userId":"16607095869821949390"}},"outputId":"6e01fcd6-09cf-4a36-830e-4057f0289d5d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[123, 456, 123778, 8898]"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["Где еще применяются лямбда-функции:\n","- встроенные функции `min()`, `max()`\n","- функции `nlargest()` и `nsmallest()` из модуля `heapq`\n","- функция `filter` - фильтрование элементов списка, применяем к элементам функцию, если вернула `True`, то оставляем\n","- многие библиотеки\n"],"metadata":{"id":"pTRXcR5k3ZPM"}}],"metadata":{"celltoolbar":"Слайд-шоу","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"colab":{"provenance":[{"file_id":"10dr22JnRIvQw7gnZOVltu5GngPW0CF7B","timestamp":1707641256398},{"file_id":"1xsQWzjNntSh7eYgQGh5JUHEQ0tJysr15","timestamp":1674979428406}],"collapsed_sections":["ZH3A4fKpxAOh"],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}